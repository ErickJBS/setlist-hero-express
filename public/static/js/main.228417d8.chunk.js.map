{"version":3,"sources":["assets/dashboard.svg","routing/PrivateRoute.jsx","redux/auth/auth.types.js","redux/auth/auth.reducer.js","redux/band/band.types.js","redux/band/band.reducer.js","redux/musician/musician.types.js","redux/musician/musician.reducer.js","redux/song/song.types.js","redux/song/song.reducer.js","redux/growl/growl.reducer.js","redux/growl/growl.types.js","redux/event/events.types.js","redux/event/events.reducer.js","redux/root.reducer.js","redux/store.js","redux/auth/auth.selector.js","redux/auth/auth.actions.js","components/mini-logo.jsx","environments/production.js","environments/base.js","services/AuthService.js","components/register/register-form.jsx","utils/RegisterUtils.js","pages/auth/auth-page.jsx","pages/auth/register-page.jsx","components/login/social-network-button.jsx","components/login/login-form.jsx","pages/auth/login-page.jsx","utils/SetAuthToken.js","components/sidebar/icons-and-element-names.js","components/sidebar/sidebar-element.jsx","components/sidebar/sidebar-logo.jsx","components/sidebar/sidebar.jsx","redux/band/band.actions.js","redux/band/band.selector.js","services/BaseService.js","services/BandService.js","components/table-header.jsx","redux/growl/growl.actions.js","components/multiselect-selected.jsx","components/manage-bands/genre-items.js","components/manage-bands/create-band.jsx","components/manage-bands/manage-bands-body.jsx","components/page-title.jsx","pages/manage-bands/bands-overview.jsx","components/manage-bands/band-title.jsx","redux/event/events.actions.js","redux/event/events.selector.js","services/EventService.js","components/manage-bands/band/create-event.jsx","components/manage-bands/band/edit-event.jsx","components/manage-bands/band/tag-template.jsx","components/manage-bands/band/band-events.jsx","redux/musician/musician.actions.js","redux/musician/musician.selector.js","services/MusicianService.js","components/manage-bands/band/instruments-options.js","components/manage-bands/band/add-band-member.jsx","components/manage-bands/band/band-members.jsx","redux/song/song.actions.js","redux/song/song.selector.js","services/SongService.js","components/manage-bands/band/add-song.jsx","components/manage-bands/band/band-songs.jsx","components/manage-bands/song/sheets-options.js","components/manage-bands/song/sheet-uploader.jsx","components/manage-bands/song/manage-song-sheets.jsx","components/manage-bands/song/lyrics-editor.jsx","components/manage-bands/song/chords-editor.jsx","components/manage-bands/song/song-sheets-router.jsx","components/manage-bands/band/band-songs-router.jsx","components/manage-bands/band/edit-band.jsx","components/manage-bands/topbar/band-topbar-element.jsx","components/manage-bands/topbar/band-topbar.jsx","pages/manage-bands/view-band.jsx","pages/manage-bands/manage-bands-page.jsx","components/setlists/setlist-body.jsx","pages/setlists/setlists-page.jsx","components/setlists/setlist-title.jsx","components/setlists/add-set.jsx","components/setlists/modify-set.jsx","components/setlists/delete-set.jsx","components/setlists/event-setlist.jsx","pages/setlists/view-event.jsx","pages/setlists/setlists-router.jsx","pages/home-page.jsx","App.js","serviceWorker.js","index.js","assets/only_logo.svg","assets/register_bg.jpg","assets/google_logo.svg","assets/fb_logo.svg","assets/login_bg.jpg"],"names":["module","exports","connect","state","auth","Component","component","user","loading","path","rest","render","props","to","AuthActionTypes","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_SUCCESS","REGISTER_FAILURE","jwt","Cookies","get","JSON","parse","INITIAL_STATE","token","error","authReducer","action","type","payload","BandActionTypes","FETCH_BANDS_SUCCESS","FETCH_BANDS_FAILURE","SELECT_BAND","UPDATE_SELECTED_BAND","bands","selectedBand","bandReducer","MusicianActionTypes","FETCH_MUSICIANS_SUCCESS","FETCH_MUSICIANS_FAILURE","musicians","musicianReducer","SongActionsTypes","FETCH_SONGS","SELECT_SONG","songs","song","songReducer","messages","growlMessages","message","push","EventsActionTypes","FETCH_EVENTS","SELECT_EVENT","EventActionTypes","events","selectecEvent","eventReducer","rootReducer","combineReducers","musician","event","persistReducer","key","storage","blacklist","band","store","createStore","devToolsEnhancer","persistor","persistStore","selectUser","createSelector","logout","MiniLogo","className","src","logo","alt","style","height","width","env","host","api","isProduction","isDevelopment","environment","baseUrl","AuthService","social","requestUrl","axios","response","fetchedUrl","request","responseURL","console","log","data","post","headers","status","Error","withCredentials","errors","msg","mapStateToProps","createStructuredSelector","dispatch","registerUser","registerSuccess","useState","password","setPassword","name","setName","username","setUsername","email","setEmail","passwordFeedback","setPasswordFeedback","validPassword","setValidPassword","confirmPassword","setConfirmPassword","passwordConfirmed","setPasswordConfifmed","confirmPasswordFeedback","setConfirmPasswordFeedback","isRegistered","setIsRegistered","useEffect","test","onSubmit","e","preventDefault","displayName","authService","register","then","value","alert","catch","required","id","placeholder","onChange","target","aria-describedby","paddingLeft","image","children","backgroundImage","backgroundRepeat","backgroundAttachment","backgroundSize","Card","padding","RegisterPage","SocialNetworkButton","text","btnClass","onClick","window","location","href","marginRight","loginFailure","identifier","setIdentifier","errorFeedback","setErrorFeedback","login","gLogo","fLogo","LoginPage","setAuthToken","defaults","common","icon","setlist","SidebarElement","history","useHistory","selected","useLocation","pathname","match","SidebarLogo","marginTop","withRouter","renderSidebarElements","Object","keys","iconsAndNames","map","element","index","margin","remove","fetchBandsSuccess","fetchBandsFailure","selectBand","selectBands","bandState","selectSelectedBand","BaseService","resource","this","resourceUrl","obj","query","put","delete","TableHeader","isDialogDisplaying","setIsDialogDisplaying","setGlobalFilter","buttonText","paddingTop","paddingBottom","Button","active","variant","onInput","showMessage","genreItems","label","fetchBands","callback","genres","setGenres","undefined","imageUrl","setImageUrl","bandName","setBandName","bandDescription","setBandDescription","description","manager","bandService","create","result","newBands","concat","join","severity","summary","detail","htmlFor","multiple","auto","url","onUpload","xhr","downloadUrl","accept","maxFileSize","Left","rows","minWidth","maxSelectedLabels","optionLabel","optionValue","options","selectedItemTemplate","globalFilter","selectedColumn","Modal","size","show","onHide","dialogClassName","aria-labelledby","onExiting","Header","closeButton","Title","Body","Footer","header","scrollable","scrollHeight","sortField","selectionMode","sortOrder","selection","onSelectionChange","field","sortable","textAlign","PageTitle","title","BandsOverview","generateGenreTags","split","genre","Fragment","Badge","EventActionsTypes","fetchEvents","selectEvent","selectEvents","eventsState","selectSelectedEvent","date","setDate","tags","setTags","tour","setTour","setLocation","designer","setDesigner","Date","eventService","moment","format","newEvent","editable","showButtonBar","separator","updateEvent","update","ev","TagTemplate","rowData","column","length","tag","isConfirmDialogDisplaying","setIsConfirmDialogDisplaying","eventToBeDeleted","setEventToBeDeleted","isEditDialogDisplaying","setIsEditDialogDisplaying","eventToEdit","setEventToEdit","eventsByBand","newEvents","renderUpdateModal","renderDeleteModal","centered","filter","body","TagsTemplate","headerStyle","bodyStyle","overflow","fetchMusiciansSuccess","selectMusicians","musiciansState","fetchMusicians","selectedInstrument","setSelectedInstrument","instrument","musicianService","setTimeout","life","getById","newMusician","class","fetchFailure","fetchMusiciansFailure","isUpdateDialogDisplaying","setIsUpdateDialogDisplaying","musicianToBeModified","setMusicianToBeModified","getAll","results","newMusicians","toUpperCase","slice","resizableColumns","setGlobalFilte","fetchSongs","selectSong","selectSelectedSong","songsState","selectSongs","tempo","setTempo","songService","newSong","songToBeDeleted","setSongToBeDeleted","setInstrument","updateSheets","sheets","find","sheet","content","updateSong","CustomHeader","lyricsCallback","chordsCallback","isLyricsEdition","isChordsEdition","renderModal","lyrics","chords","formatedSheets","root","songSheetsFormated","expander","aria-label","editorState","setEditorState","Converter","ops","convert","editorText","setEditorText","headerTemplate","onTextChange","source","compose","delta","SongSheetsRouter","ChordsEditor","LyricsEditor","ManageSongSheets","BandSongsRouter","BandSongs","reducer","updateSelectedBand","trim","isBandActive","setIsBandActive","useReducer","actionState","handleButtonClick","updatedBand","defaultValue","BandTopBarElement","useParams","toLowerCase","renderTopBandElements","elementName","BandTopBar","BandMembers","BandEvents","EditBand","from","ViewBand","generateTags","lenght","setSongs","setSetSongs","stateEvent","toLocaleDateString","for","formatedSets","setFormatedSets","selectedSet","setSelectedSet","set","_id","setIsAddSetDialogDisplaying","setIsModifySetDialogDisplaying","setIsRemoveSetDialogDisplaying","allSongs","setAllSongs","setlistItems","setSetlistItems","isAddSetDialogDisplaying","isModifySetDialogDisplaying","isRemoveSetDialogDisplaying","songIndex","renderAddSetModal","renderModifySetModal","renderRemoveSet","selectedEvent","eventsByLED","ViewEvent","SetlistsPage","prevMessages","setPrevMessages","growl","useRef","current","ref","position","ManageBandsPage","SetlistsRouter","App","jwtCookie","HomePage","exact","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.228417d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dashboard.7217f10c.svg\";","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  auth: { user, loading },\r\n  path,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    path={path}\r\n    render={\r\n      props => (!user && !loading ? (\r\n          <Redirect to='/login' />\r\n        ) : (\r\n            <Component {...props} {...rest} />\r\n        )\r\n      )\r\n    }    \r\n  />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","const AuthActionTypes = {\r\n    LOGIN_START: 'LOGIN_START',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n    LOGOUT: 'LOGOUT',\r\n    REGISTER_SUCCESS: 'REGISTER_SUCCESS',\r\n    REGISTER_FAILURE: 'REGISTER_FAILURE'\r\n}\r\n\r\nexport default AuthActionTypes;","import AuthActionTypes from './auth.types';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst jwt = (Cookies.get('jwt')) ? JSON.parse((Cookies.get('jwt'))) : {};\r\n\r\nconst INITIAL_STATE = {\r\n    user: jwt !== {} ? {\r\n        token : jwt.token,\r\n        ...jwt.user\r\n    } : {} ,\r\n    error: {}\r\n};\r\n\r\nconst authReducer = (state = INITIAL_STATE, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case AuthActionTypes.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: payload,\r\n            };\r\n        case AuthActionTypes.LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: payload\r\n            };\r\n        case AuthActionTypes.LOGOUT:\r\n            return {\r\n                ...state,\r\n                user: {},\r\n                error: {}\r\n            };\r\n        case AuthActionTypes.REGISTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: payload\r\n            };\r\n        case AuthActionTypes.REGISTER_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","const BandActionTypes = {\r\n    FETCH_BANDS_SUCCESS: 'FETCH_BANDS_SUCCESS',\r\n    FETCH_BANDS_FAILURE: 'FETCH_BANDS_FAILURE',\r\n    SELECT_BAND: 'SELECT_BAND',\r\n    UPDATE_SELECTED_BAND: 'UPDATE_SELECTED_BAND'\r\n}\r\n\r\nexport default BandActionTypes;","import BandActionTypes from './band.types';\r\n\r\nconst { FETCH_BANDS_SUCCESS, FETCH_BANDS_FAILURE, SELECT_BAND, UPDATE_SELECTED_BAND } = BandActionTypes;\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    bands: [],\r\n    selectedBand: null,\r\n    error: {}\r\n}\r\n\r\nconst bandReducer = (state = INITIAL_STATE, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case FETCH_BANDS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                bands: payload\r\n            }\r\n        case FETCH_BANDS_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: payload\r\n            }\r\n        case SELECT_BAND:\r\n            return {\r\n                ...state,\r\n                selectedBand: payload\r\n            }\r\n        case UPDATE_SELECTED_BAND:\r\n            return {\r\n                ...state,\r\n                selectedBand: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default bandReducer;","const MusicianActionTypes = {\r\n    FETCH_MUSICIANS_SUCCESS: 'FETCH_MUSICIANS_SUCCESS',\r\n    FETCH_MUSICIANS_FAILURE: 'FETCH_MUSICIANS_FAILURE'\r\n}\r\n\r\nexport default MusicianActionTypes;","import MusicianActionTypes from './musician.types';\r\n\r\nconst {FETCH_MUSICIANS_FAILURE, FETCH_MUSICIANS_SUCCESS} = MusicianActionTypes;\r\n\r\nconst INITIAL_STATE = {\r\n    musicians: [],\r\n    error: {}\r\n}\r\n\r\nconst musicianReducer = (state = INITIAL_STATE, action) => {\r\n    const {type, payload} = action;\r\n    switch(type){\r\n        case FETCH_MUSICIANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                musicians: payload\r\n            }\r\n        case FETCH_MUSICIANS_FAILURE:\r\n            return {\r\n                ...state,\r\n                error:payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default musicianReducer;","const SongActionsTypes = {\r\n    FETCH_SONGS : 'FETCH_SONGS',\r\n    SELECT_SONG : 'SELECT_SONG'\r\n};\r\n\r\nexport default SongActionsTypes;","import SongActionsTypes from './song.types';\r\n\r\nconst {FETCH_SONGS, SELECT_SONG} = SongActionsTypes;\r\n\r\nconst INITIAL_STATE = {\r\n    songs: [],\r\n    song: {}\r\n}\r\n\r\nconst songReducer = (state = INITIAL_STATE, action) => {\r\n    const {type,payload} = action;\r\n    switch(type){\r\n        case FETCH_SONGS:\r\n            return {\r\n                ...state,\r\n                songs: payload\r\n            }\r\n        case SELECT_SONG:\r\n            return {\r\n                ...state,\r\n                song: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default songReducer;","import {SHOW_MESSAGE} from './growl.types';\r\n\r\nconst INITIAL_STATE = {\r\n    messages: []\r\n}\r\n\r\nconst growlMessages = (state = INITIAL_STATE, action) => {\r\n    const {type, message} = action;\r\n    switch (type) {\r\n        case SHOW_MESSAGE:\r\n            let messages = [];\r\n            messages.push(message);\r\n            return {messages: messages};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default growlMessages;","export const SHOW_MESSAGE = 'SHOW_MESSAGE';","const EventsActionTypes = {\r\n    FETCH_EVENTS: 'FETCH_EVENTS',\r\n    SELECT_EVENT: 'SELECT_EVENT'\r\n}\r\n\r\nexport default EventsActionTypes;","import EventActionTypes from './events.types';\r\n\r\nconst {FETCH_EVENTS, SELECT_EVENT} = EventActionTypes;\r\n\r\nconst INITIAL_STATE = {\r\n    events: [],\r\n    selectecEvent: {}\r\n}\r\n\r\nconst eventReducer = (state = INITIAL_STATE, action) => {\r\n    const { type, payload } = action;\r\n    switch(type) {\r\n        case FETCH_EVENTS:\r\n            return {\r\n                ...state,\r\n                events: payload\r\n            }\r\n        case SELECT_EVENT:\r\n            return {\r\n                ...state,\r\n                selectecEvent: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default eventReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport authReducer from './auth/auth.reducer';\r\nimport bandReducer from './band/band.reducer';\r\nimport musicianReducer from './musician/musician.reducer';\r\nimport songReducer from './song/song.reducer';\r\nimport growlMessages from './growl/growl.reducer';\r\nimport eventReducer from './event/events.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    growlMessages,\r\n    auth: authReducer,\r\n    musician: musicianReducer,\r\n    event: persistReducer({\r\n        key: 'event',\r\n        storage: storage,\r\n        blacklist: ['events']\r\n    }, eventReducer),\r\n    song: persistReducer({\r\n        key: 'song',\r\n        storage: storage,\r\n        blacklist: ['songs']\r\n    }, songReducer),\r\n    band: persistReducer({\r\n        key: 'band',\r\n        storage: storage,\r\n        blacklist: ['bands']\r\n    }, bandReducer)\r\n    \r\n});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root.reducer';\r\n\r\nconst initialState = {};\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    devToolsEnhancer()\r\n);\r\n\r\nexport const persistor = persistStore(store);\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectAuth = state => state.auth;\r\n\r\nexport const selectUser = createSelector(\r\n    [selectAuth],\r\n    auth => auth.user\r\n);","import AuthActionTypes from './auth.types';\r\n\r\nexport const loginStart = crendentials => ({\r\n    type: AuthActionTypes.LOGIN_START,\r\n    payload: crendentials\r\n});\r\n\r\nexport const loginSuccess = (user) => ({\r\n    type: AuthActionTypes.LOGIN_SUCCESS,\r\n    payload: user\r\n});\r\n\r\nexport const loginFailure = (error) => ({\r\n    type: AuthActionTypes.LOGIN_FAILURE,\r\n    payload: error\r\n});\r\n\r\nexport const logout = () => ({\r\n    type: AuthActionTypes.LOGOUT\r\n});\r\n\r\nexport const registerSuccess = (user) => ({\r\n    type: AuthActionTypes.REGISTER_SUCCESS,\r\n    payload: user\r\n});\r\n\r\nexport const registerFailure = (error) => ({\r\n    type: AuthActionTypes.REGISTER_FAILURE,\r\n    payload: error\r\n});","import React from 'react';\r\nimport logo from '../assets/only_logo.svg';\r\n\r\nconst MiniLogo = () => {\r\n    return (\r\n        <div className=\"center image-centerd animated rubberBand \">\r\n            <img src={logo} alt=\"logo\"\r\n                style={/**Satanic IIFE */\r\n                    ((value) => ({\r\n                        height: `${value}px`,\r\n                        width: `${value}px`\r\n                    }))(100)\r\n                } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiniLogo;","import environment from './base';\r\n\r\nconst host = '';\r\nconst env = environment(host);\r\n\r\nexport default {\r\n    ...env,\r\n};\r\n","const basePath = 'api';\r\n\r\nexport default (host) => {\r\n    return {\r\n        api: `${host}/${basePath}`,\r\n        isProduction: true,\r\n        isDevelopment: false,\r\n    };\r\n}\r\n","import axios from 'axios';\r\nimport environment from 'environment';\r\n\r\nconst baseUrl = environment.api;\r\n\r\nexport class AuthService {\r\n\r\n    async loginWithSocial(social) {\r\n        const requestUrl = `${baseUrl}/auth/${social}`;\r\n        const response = await axios.get(requestUrl);\r\n        const fetchedUrl = response.request.responseURL;\r\n        console.log(response);\r\n        return fetchedUrl;\r\n    }\r\n\r\n    async register(data) {\r\n        try {\r\n            const requestUrl = `${baseUrl}/auth/register`\r\n            const response = await axios.post(requestUrl, data, { headers: { 'content-type': 'application/json' } });\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error?.response?.status === 403) {\r\n                throw new Error('User already registered');\r\n            }\r\n            if (error?.response?.status === 500) {\r\n                throw new Error('Something wrong happened... try again later');\r\n            }\r\n        }\r\n    }\r\n    async login(data) {\r\n        try {\r\n            const requestUrl = `${baseUrl}/auth/email`\r\n            const response = await axios.post(requestUrl, data, { headers: { 'content-type': 'application/json' }, withCredentials:true });\r\n            console.log(response);\r\n            return response.data;\r\n        } catch (error) {\r\n            const {data, status} = error.response;\r\n            const message = data?.errors[0]?.msg;\r\n            if (status === 500) {\r\n                throw new Error('Something wrong happened... try again later');\r\n            } else {\r\n                throw new Error(message);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { registerSuccess } from '../../redux/auth/auth.actions';\r\nimport { validatePassword } from '../../utils/RegisterUtils';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport MiniLogo from '../mini-logo';\r\nimport authService from '../../services/AuthService';\r\n\r\nconst RegisterForm = ({ registerUser, user }) => {\r\n\r\n    const [password, setPassword] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [passwordFeedback, setPasswordFeedback] = useState('');\r\n    const [validPassword, setValidPassword] = useState(false);\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [passwordConfirmed, setPasswordConfifmed] = useState(false);\r\n    const [confirmPasswordFeedback, setConfirmPasswordFeedback] = useState('');\r\n    const [isRegistered, setIsRegistered] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (password !== confirmPassword) {\r\n            setConfirmPasswordFeedback('Passwords are different');\r\n            setPasswordConfifmed(false);\r\n        }\r\n        else {\r\n            setConfirmPasswordFeedback('');\r\n            setPasswordConfifmed(true);\r\n        }\r\n    },\r\n        [password, confirmPassword]);\r\n\r\n    useEffect(() => {\r\n        if (password === '') setPasswordFeedback('');\r\n        else if (!validatePassword(password)) {\r\n            setPasswordFeedback('Password must have at least one capital letter, one lowercase letter, one number and one special character (! @ # \\$ % \\^ & \\*)');\r\n        } else {\r\n            setPasswordFeedback('');\r\n            setValidPassword(true);\r\n        }\r\n    }, [password]);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validPassword && passwordConfirmed) {\r\n            user = { email, displayName: name, password, username };\r\n            authService.register(user)\r\n                .then(value => {\r\n                    console.log(value);\r\n                    setIsRegistered(true);\r\n                    alert('user registered');\r\n                })\r\n                .catch(error => {\r\n                    setConfirmPasswordFeedback(error.message);\r\n                });\r\n\r\n        }\r\n    };\r\n    if (isRegistered) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n    return (\r\n        <>\r\n            <MiniLogo />\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" required\r\n                        id=\"inputName\" placeholder=\"Enter name\"\r\n                        onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" id=\"inputUsername\"\r\n                        placeholder=\"Enter username\" required\r\n                        onChange={(e) => setUsername(e.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"email\" className=\"form-control\" id=\"inputEmail1\"\r\n                        aria-describedby=\"emailHelp\" placeholder=\"Enter email\" required\r\n                        onChange={(e) => setEmail(e.target.value)} />\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" required placeholder=\"Password\"\r\n                        id=\"inputPassword1\" onChange={(e) => setPassword(e.target.value)} />\r\n                    <small id=\"passwordFeedback\" className=\"form-text text-danger\">{passwordFeedback}</small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" required placeholder=\"Confirm Password\"\r\n                        id=\"inputPassword2\" onChange={(e) => setConfirmPassword(e.target.value)} />\r\n                    <small id=\"passwordFeedback\" className=\"form-text text-danger\">{confirmPasswordFeedback}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block text-light\">Register</button>\r\n            </form>\r\n            <div className=\"spacer-mini\" />\r\n            <small className=\"center\">Already have an account? <Link style={{ paddingLeft: '5px' }} to=\"/login\">Login here</Link></small>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    registerUser: user => dispatch(registerSuccess(user))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RegisterForm);\r\n\r\n","export const validatePassword = (string) => /(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/.test(string);","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\n\r\nconst AuthPage = ({ image, children }) => {\r\n    return (\r\n        <div className=\"p-3 fill-height center\" style={{\r\n            backgroundImage: `url(${image})`,\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundAttachment: 'fixed',\r\n            backgroundSize: 'cover'\r\n        }}>\r\n            <div className=\"animated faster fadeIn\">\r\n                <Card className=\"shadowed\"\r\n                    style={{ width: '20rem', padding: '15px' }}>\r\n                    {children}\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(AuthPage);","import React from 'react';\r\nimport image from '../../assets/register_bg.jpg';\r\nimport RegisterForm from '../../components/register/register-form';\r\nimport AuthPage from './auth-page';\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <>\r\n            <AuthPage image={image}>\r\n                <RegisterForm />\r\n            </AuthPage>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default RegisterPage;\r\n","import environment from 'environment';\r\nimport React from 'react';\r\n\r\nconst baseUrl = environment.api;\r\n\r\nconst SocialNetworkButton = ({ logo, text, action, btnClass }) => {\r\n    return (\r\n        <button className={`btn btn-block ${btnClass}`} \r\n        onClick={() => window.location.href = `${baseUrl}/auth/${action}`}>\r\n            <span className=\"content-horizontal\">\r\n                <img src={logo} alt=\"logo\"\r\n                    style={/**Satanic IIFE */\r\n                        ((value) => ({\r\n                            height: `${value}px`,\r\n                            width: `${value}px`,\r\n                            marginRight: \"12px\"\r\n                        }))(20)\r\n                    } />\r\n                {text}\r\n            </span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SocialNetworkButton;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { loginFailure } from '../../redux/auth/auth.actions';\r\nimport { Link } from 'react-router-dom';\r\nimport MiniLogo from '../mini-logo';\r\nimport SocialNetworkButton from './social-network-button'\r\nimport gLogo from '../../assets/google_logo.svg';\r\nimport fLogo from '../../assets/fb_logo.svg';\r\nimport authService from '../../services/AuthService';\r\n\r\n\r\nconst LoginForm = ({ user }) => {\r\n    const [password, setPassword] = useState('');\r\n    const [identifier, setIdentifier] = useState('');\r\n    const [errorFeedback, setErrorFeedback] = useState('');\r\n\r\n    useEffect(() => setErrorFeedback(''), [password, identifier]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        user = { identifier, password };\r\n        authService.login(user)\r\n            .then(value => {\r\n                alert('Logged In!');\r\n                window.location.href = '/';\r\n            })\r\n            .catch(error => {\r\n                setErrorFeedback(error.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MiniLogo />\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" required\r\n                        id=\"inputName\" placeholder=\"Enter email or username\"\r\n                        onChange={(e) => setIdentifier(e.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" required placeholder=\"Password\"\r\n                        id=\"inputPassword2\" onChange={(e) => setPassword(e.target.value)} />\r\n\r\n                    <small id=\"passwordFeedback\" className=\"form-text text-danger\">{errorFeedback}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block text-light\">Log in</button>\r\n            </form>\r\n            <div className=\"spacer-mini\" />\r\n            <SocialNetworkButton action=\"google\" text=\"Log in with Google\" logo={gLogo} btnClass=\"btn-outline-light\" />\r\n            <SocialNetworkButton action=\"facebook\" text=\"Log in with Facebook\" logo={fLogo} btnClass=\"btn-outline-light\" />\r\n            <div className=\"spacer-mini\" />\r\n            <small className=\"center\">\r\n                Don't have an account? <Link style={{ paddingLeft: '5px' }} to=\"/register\">Register here</Link></small>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginFailure: error => dispatch(loginFailure(error))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoginForm);\r\n\r\n","import React from 'react';\r\nimport LoginForm from '../../components/login/login-form';\r\nimport AuthPage from './auth-page';\r\nimport image from '../../assets/login_bg.jpg';\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <>\r\n            <AuthPage image={image}>\r\n                <LoginForm />\r\n            </AuthPage>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LoginPage;","import axios from 'axios';\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n}\r\n\r\nexport default setAuthToken;\r\n","import React from 'react'\r\nimport logo from '../../assets/dashboard.svg';\r\nexport default {\r\n    // dashboard: {\r\n    //     text: 'Dashboard',\r\n    //     icon: <img src={logo} alt=\"logo\" className=\"fas dashboard\"/>,\r\n    //     path: 'dashboard'\r\n    // },\r\n    // profile: {\r\n    //     text: 'Profile',\r\n    //     icon: <i className=\"fas fa-user\" />,\r\n    //     path: 'profile'\r\n    // },\r\n    bands: {\r\n        text: 'Bands',\r\n        icon: <i className=\"fas fa-users\" />,\r\n        path: 'bands'\r\n    },\r\n    setlist: {\r\n        text: 'Setlists',\r\n        icon: <i className=\"fas fa-list\" />,\r\n        path: 'setlists'\r\n    },\r\n}","import React from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport './sidebar-element.css';\r\n\r\nconst SidebarElement = ({ children, text, path }) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const selected = location.pathname.match(path);\r\n\r\n    return (\r\n        <div className={`row selectable ${selected ? 'selected' : ''}`} style={{ padding: '10px' }}\r\n            onClick={() => history.push(`/${path}`)}>\r\n            <div className=\"col\">\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-sm-1\">\r\n                        {children}\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <span className=\"h6\" >{text}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SidebarElement;\r\n","import React from 'react'\r\nimport logo from '../../assets/only_logo.svg';\r\nconst SidebarLogo = () => {\r\n    return (\r\n        <div className=\"col \">\r\n            <div className=\"center image-centerd\">\r\n                <img className=\"animated fast sidebar-logo rubberBand\"\r\n                    src={logo} alt=\"logo\"\r\n                    style={/**Satanic IIFE */\r\n                        ((value) => ({\r\n                            height: `${value}px`,\r\n                            width: `${value}px`,\r\n                            marginTop: '20px'\r\n                        }))(100)\r\n                    } />\r\n            </div>\r\n            <h5 className=\"center\"><strong>SETLIST HERO</strong></h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarLogo;\r\n\r\n","import Cookies from 'js-cookie';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { logout } from '../../redux/auth/auth.actions';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport iconsAndNames from './icons-and-element-names';\r\nimport SidebarElement from './sidebar-element';\r\nimport './sidebar-element.css';\r\nimport SidebarLogo from './sidebar-logo';\r\n\r\n\r\nconst Sidebar = () => {\r\n    const renderSidebarElements = Object.keys(iconsAndNames).map(\r\n        (element, index) => {\r\n            const { text, icon, path } = iconsAndNames[element];\r\n            return (\r\n                <SidebarElement\r\n                    key={index}\r\n                    text={text}\r\n                    path={path} >\r\n                    {icon}\r\n                </SidebarElement>\r\n            )\r\n        });\r\n\r\n\r\n    const onLogout = () => {\r\n        logout();\r\n        Cookies.remove('jwt');\r\n        window.location.href = '/';\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row justify-content-center\">\r\n                <SidebarLogo />\r\n            </div>\r\n            <hr style={{ margin: '5px' }} />\r\n            {renderSidebarElements}\r\n            <div className=\"spacer-lg\" />\r\n            <span className=\"center\">\r\n                <button className=\"btn btn-primary text-light\" onClick={onLogout}>\r\n                    <i className=\"fas fa-sign-out-alt\"></i>\r\n                    {' Logout'}\r\n                </button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    logout: () =>\r\n        dispatch(logout())\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withRouter(Sidebar));","import BandActionTypes from './band.types';\r\n\r\nconst {FETCH_BANDS_SUCCESS, FETCH_BANDS_FAILURE, SELECT_BAND, UPDATE_SELECTED_BAND} = BandActionTypes;\r\n\r\nexport const fetchBandsSuccess = (bands) => ({\r\n    type: FETCH_BANDS_SUCCESS,\r\n    payload: bands\r\n});\r\n\r\nexport const fetchBandsFailure = (error) => ({\r\n    type: FETCH_BANDS_FAILURE,\r\n    payload: error\r\n});\r\n\r\nexport const selectBand = (band) => ({\r\n    type: SELECT_BAND,\r\n    payload: band\r\n});\r\n\r\nexport const updateSelectedBand = (band) => ({\r\n    type:UPDATE_SELECTED_BAND,\r\n    payload: band\r\n})","import {createSelector} from 'reselect';\r\n\r\nexport const bands = state => state.band\r\n\r\nexport const selectBands = createSelector(\r\n    [bands],\r\n    bandState => bandState.bands\r\n)\r\n\r\nexport const selectSelectedBand = createSelector(\r\n    [bands],\r\n    bandState => bandState.selectedBand\r\n);\r\n\r\n","import axios from 'axios';\r\nimport environment from 'environment';\r\n\r\nconst baseUrl = environment.api;\r\nexport default class BaseService {\r\n\r\n    constructor(resource) {\r\n        this.resource = resource;\r\n        this.resourceUrl = `${baseUrl}/${this.resource}`;\r\n    }\r\n\r\n    async create(obj) {\r\n        try {\r\n            const response = await axios.post(this.resourceUrl, obj);\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error?.response?.status === 500) {\r\n                throw new Error('Something happened');\r\n            } else {\r\n                const { data } = error.response;\r\n                const errors = data?.errors;\r\n                throw errors;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getById(id) {\r\n        try {\r\n            const response = await axios.get(`${this.resourceUrl}/${id}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            const { status } = error?.response?.status;\r\n            if (status === 500) {\r\n                throw new Error('Something happened');\r\n            } else if (status === 404 || status === 401) {\r\n                const { data } = error.response;\r\n                const message = data?.errors[0]?.msg;\r\n                throw new Error(message);\r\n            } else {\r\n                const { data } = error.response;\r\n                const errors = data?.errors;\r\n                throw errors;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getAll({query,id}) {\r\n        try {\r\n            const response = await axios.get(`${this.resourceUrl}/?${query}=${id}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error?.response?.status === 500) {\r\n                throw new Error('Something happened');\r\n            } else {\r\n                const errors = error?.response?.data?.errors;\r\n                throw errors;\r\n            }\r\n        }\r\n    }\r\n\r\n    async update(id, obj) {\r\n        try {\r\n            const response = await axios.put(`${this.resourceUrl}/${id}`, obj);\r\n            return response.data;\r\n        } catch (error) {\r\n            const { status } = error?.response?.status;\r\n            if (status === 500) {\r\n                throw new Error('Something happened');\r\n            } else if (status === 404 || status === 401) {\r\n                const { data } = error.response;\r\n                const message = data?.errors[0]?.msg;\r\n                throw new Error(message);\r\n            } else {\r\n                 \r\n                const errors = error?.response?.data?.errors;\r\n                throw errors;\r\n            }\r\n        }\r\n    }\r\n    \r\n    async delete(id) {\r\n        try {\r\n            await axios.delete(`${this.resourceUrl}/${id}`);\r\n            return 'Deletion succeed';\r\n        } catch (error) {\r\n            const { status } = error?.response?.status;\r\n            if (status === 500) {\r\n                throw new Error('Something happened');\r\n            } else if (status === 404 || status === 401) {\r\n                const { data } = error.response;\r\n                const message = data?.errors[0]?.msg;\r\n                throw new Error(message);\r\n            } else {\r\n                const { data } = error.response;\r\n                const errors = data?.errors;\r\n                throw errors;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import BaseService from './BaseService';\r\n\r\nclass BandService extends BaseService {\r\n    constructor(){\r\n        super('band');\r\n    }\r\n\r\n    async getAll(id){\r\n        return super.getAll({query:'manager', id})\r\n    }\r\n}\r\n\r\nexport default new BandService();","import React from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\nconst TableHeader = ({isDialogDisplaying, setIsDialogDisplaying, setGlobalFilter, buttonText}) => (\r\n    <div style={{ paddingTop: '2vh' }}>\r\n        <div className=\"d-flex justify-content-start\">\r\n            <div style={{ paddingBottom: '1vh', paddingLeft:'0.5vw' }}>\r\n                <Button\r\n                    active={isDialogDisplaying}\r\n                    variant=\"secondary\"\r\n                    onClick={() => setIsDialogDisplaying(true)}>\r\n                    <span className=\"text-light\">\r\n                        <i className=\"fas fa-plus-square\" />\r\n                        {` ${buttonText}`}\r\n                    </span>\r\n                </Button>\r\n            </div>  \r\n            <div style={{ paddingLeft: '50vw' }}>\r\n                <InputText type=\"search\" placeholder=\"Search\" onInput={(e) => setGlobalFilter(e.target.value)} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\nexport default TableHeader;","import {SHOW_MESSAGE} from './growl.types';\r\n\r\nexport const showMessage = (message) => ({\r\n    type: SHOW_MESSAGE,\r\n    message: message\r\n});\r\n","import React from 'react'\r\n\r\nconst selected = (value) => {\r\n    if (value) {\r\n        return (\r\n            <div className=\"my-multiselected-item-token\">\r\n                {value}\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return <span>Select genre</span>\r\n    }\r\n}\r\nexport default selected;","const genreItems = [\r\n    {label: 'Rock', value: 'Rock'},\r\n    {label: 'Metal', value: 'Metal'},\r\n    {label: 'Pop', value: 'Pop'},\r\n    {label: 'Cumbias', value: 'Cumbias'},\r\n    {label: 'Norteñas', value: 'Norteñas'},\r\n];\r\n\r\nexport default genreItems;","import environment from 'environment';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { fetchBandsSuccess } from '../../redux/band/band.actions';\r\nimport { selectBands } from '../../redux/band/band.selector';\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nimport bandService from '../../services/BandService';\r\nimport selected from '../multiselect-selected';\r\nimport genreItems from './genre-items';\r\n\r\n\r\nconst baseUrl = environment.api;\r\n\r\n\r\n\r\nconst CreateBand = ({ user, callback, fetchBands, bands, showMessage }) => {\r\n    const [genres, setGenres] = useState('');\r\n    const [imageUrl, setImageUrl] = useState(undefined);\r\n    const [bandName, setBandName] = useState('');\r\n    const [bandDescription, setBandDescription] = useState('');\r\n\r\n    const onUpload = (e) => {\r\n        showMessage({ severity: 'success', summary: 'Success', detail: 'File Uploaded' });\r\n        const response = JSON.parse(e.xhr.response);\r\n        setImageUrl(response.downloadUrl);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const band = {\r\n            name: bandName,\r\n            description: bandDescription,\r\n            genres,\r\n            manager: user.id,\r\n            logo: imageUrl\r\n        };\r\n        bandService.create(band)\r\n            .then((result) => {\r\n                const newBands = bands.concat({ \r\n                    ...result, \r\n                    genres: result.genres.join(', '), \r\n                    active: band.active ? 'Active' : 'Inactive' \r\n                });\r\n                callback();\r\n                fetchBands(newBands);\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Band Created' });\r\n\r\n            })\r\n            .catch((error) => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't create band\" });\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-5\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"h6\" htmlFor=\"create-band-profile-pic\"><strong>Upload band logo</strong></label>\r\n                            <div>\r\n                                <FileUpload\r\n                                    name=\"data\" id=\"create-band-profile-pic\"\r\n                                    multiple={false}\r\n                                    auto\r\n                                    url={`${baseUrl}/storage/upload/image`}\r\n                                    onUpload={onUpload}\r\n                                    accept=\"image/*\" maxFileSize={1000000}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"h6\">Profile selected:</label>\r\n                            {imageUrl && <img className=\"animated faster fadeIn rounded\"src={imageUrl} alt=\"band logo\" style={{Left:'10px',height:'100px', width:'100px'}} />}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"h6\" htmlFor=\"band-name\"><strong>Band name</strong></label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"band-name\" onChange={(e) => setBandName(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"h6\" htmlFor=\"band-description\"><strong>Band description</strong></label>\r\n                            <textarea className=\"form-control\" id=\"band-description\" rows=\"3\" onChange={(e) => setBandDescription(e.target.value)}></textarea>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <div className=\"row\">\r\n                                <label className=\"h6 col\" htmlFor=\"band-genres\">\r\n                                    <strong>Band genres</strong>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <MultiSelect\r\n                                        style={{ width: '70%', minWidth: '12em' }}\r\n                                        maxSelectedLabels={10}\r\n                                        placeholder=\"Select genres\"\r\n                                        optionLabel=\"label\"\r\n                                        optionValue=\"value\"\r\n                                        id=\"Band-genres\"\r\n                                        value={genres}\r\n                                        options={genreItems}\r\n                                        onChange={(e) => setGenres(e.value)}\r\n                                        selectedItemTemplate={selected}\r\n\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\"></div>\r\n                            <div className=\"col\" style={{paddingLeft:'57px'}}>\r\n                                <Button variant=\"success\" type=\"submit\" >Save</Button>{' '}\r\n                                <Button variant=\"secondary\" onClick={callback}>Close</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser,\r\n    bands: selectBands\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchBands: bands => dispatch(fetchBandsSuccess(bands)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateBand);","import { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { fetchBandsFailure, fetchBandsSuccess, selectBand } from '../../redux/band/band.actions';\r\nimport { selectBands } from '../../redux/band/band.selector';\r\nimport TableHeader from '../table-header';\r\nimport CreateBand from './create-band';\r\nconst ManageBandsBody = ({ bands, selectBand }) => {\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [isDialogDisplaying, setIsDialogDisplaying] = useState(false);\r\n    const [selectedColumn, setSelectedColumn] = useState(null);\r\n    const history = useHistory();\r\n\r\n    const createBandCallback = () => {\r\n        setIsDialogDisplaying(false);\r\n\r\n    }\r\n    const chooseBand = e => {\r\n        selectBand(e.value);\r\n        history.push(`/bands/${e.value.id}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal\r\n                size=\"xl\"\r\n                show={isDialogDisplaying}\r\n                onHide={() => setIsDialogDisplaying(false)}\r\n                dialogClassName=\"modal-dialog-centered\"\r\n                aria-labelledby=\"modal-title\"\r\n                onExiting={() => setIsDialogDisplaying(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"modal-title\">\r\n                        Create a band\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <CreateBand callback={createBandCallback} />\r\n                    <div className=\"spacer\" />\r\n                </Modal.Body>\r\n                <Modal.Footer />\r\n            </Modal>\r\n            <DataTable className=\"animated faster fadeIn\"\r\n                header={\r\n                    <TableHeader\r\n                        buttonText=\"Add band\"\r\n                        isDialogDisplaying={isDialogDisplaying}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                        setIsDialogDisplaying={setIsDialogDisplaying} />\r\n                }\r\n                value={bands} scrollable scrollHeight=\"40vh\"\r\n                globalFilter={globalFilter} sortField=\"name\"\r\n                selectionMode=\"single\" sortOrder={1}\r\n                selection={selectedColumn} onSelectionChange={chooseBand}>\r\n                <Column field=\"name\" header=\"Name\" sortable style={{ textAlign: 'center' }} />\r\n                <Column style={{ width: '50%' }} field=\"description\" header=\"Description\" sortable />\r\n                <Column style={{ width: '25%' }} field=\"genres\" header=\"Genres\" sortable />\r\n                <Column field=\"active\" header=\"Active\" style={{ textAlign: 'center' }} />\r\n            </DataTable>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    bands: selectBands\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchBandsSuccess: bands => dispatch(fetchBandsSuccess(bands)),\r\n    fetchBandsFailure: error => dispatch(fetchBandsFailure(error)),\r\n    selectBand: band => dispatch(selectBand(band))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ManageBandsBody);","import React from 'react';\r\n\r\nconst PageTitle = ({ title, children, className }) => {\r\n    return (\r\n        <div className={className}>\r\n            <span className=\"h2\"><strong>{title}</strong></span>\r\n            <div className=\"spacer-mini\" />\r\n            <p className=\"h4 text-primary\"><strong>{children}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageTitle;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ManageBandsBody from '../../components/manage-bands/manage-bands-body';\r\nimport PageTitle from '../../components/page-title';\r\n\r\nconst BandsOverview = () => {\r\n\r\n    return (\r\n        <div className=\"container-fluid\" style={{ padding: '20px' }}>\r\n            <Card className=\"shadowed\" style={{ padding: '20px' }}>\r\n                <Card.Body>\r\n                    <PageTitle className=\"animated faster fadeIn\" title=\"Your Bands\">\r\n                        Organize your bands\r\n                    </PageTitle>\r\n                    <hr />\r\n                    <div className=\"spacer-mini\" />\r\n                    <ManageBandsBody />\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\nexport default BandsOverview;","import React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../redux/band/band.selector';\r\n\r\nconst BandTitle = ({ className, selectedBand }) => {\r\n    const { name, logo, description, genres } = selectedBand\r\n    const generateGenreTags = genres.split(',').map(\r\n        (genre, index) => {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <span className=\"h6\" key={index}><Badge variant=\"secondary\" style={{ padding: '6px' }}>{genre}</Badge></span>{' '}\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\" >\r\n                        <img src={logo} className=\"rounded\"\r\n                            alt={name}\r\n                            style={\r\n                                ((value) => ({\r\n                                    height: `${value}px`,\r\n                                    width: `${value}px`\r\n                                }))(150)\r\n                            } />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"spacer-mini\" />\r\n                        <span className=\"h3\"><strong>{name}</strong></span>\r\n                        <div className=\"spacer-sm\" />\r\n                        <p className=\"text-white\">{description}</p>\r\n                        <div>\r\n                            {generateGenreTags}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n    selectedBand: selectSelectedBand\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(BandTitle);","import EventActionsTypes from './events.types';\r\n\r\nconst {FETCH_EVENTS, SELECT_EVENT} = EventActionsTypes;\r\n\r\nexport const fetchEvents = events => ({\r\n    type: FETCH_EVENTS,\r\n    payload: events\r\n})\r\n\r\nexport const selectEvent = event => ({\r\n    type: SELECT_EVENT,\r\n    payload: event\r\n})","import {createSelector} from 'reselect';\r\n\r\nexport const events = state => state.event;\r\n\r\nexport const  selectEvents = createSelector(\r\n    [events],\r\n    eventsState => eventsState.events\r\n)\r\n\r\nexport const  selectSelectedEvent = createSelector(\r\n    [events],\r\n    eventsState => eventsState.selectecEvent\r\n)","import BaseService from './BaseService';\r\n\r\nclass EventService extends BaseService {\r\n    constructor() {\r\n        super('event');\r\n    }\r\n\r\n    async eventsByBand(id) {\r\n        return super.getAll({ query: 'band', id })\r\n    }\r\n\r\n    async eventsByLED(id) {\r\n        return super.getAll({ query: 'designer', id })\r\n    }\r\n}\r\n\r\nexport default new EventService();","import { Calendar } from 'primereact/calendar';\r\nimport { Chips } from 'primereact/chips';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { fetchEvents } from '../../../redux/event/events.actions';\r\nimport { selectEvents } from '../../../redux/event/events.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport eventService from '../../../services/EventService';\r\nimport moment from 'moment';\r\n\r\nexport const CreateEvent = ({ band, callback, showMessage, events, fetchEvents }) => {\r\n    const [date, setDate] = useState(null);\r\n    const [tags, setTags] = useState([]);\r\n    const [tour, setTour] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [location, setLocation] = useState('');\r\n    const [designer, setDesigner] = useState('');\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const event = {\r\n            band: band.id,\r\n            date: new Date(date),\r\n            tags,\r\n            tour,\r\n            name,\r\n            location,\r\n            designer\r\n        };\r\n        eventService.create(event)\r\n            .then(event => {\r\n                callback();\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Event added' });\r\n                return { ...event, date: moment(event.date).format(\"MMM Do YYYY\") };\r\n            })\r\n            .then(newEvent => fetchEvents(events.concat(newEvent)))\r\n            .catch(e => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't add event\" })\r\n            });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"event-name\">Event Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"event-name\"\r\n                        required value={name}\r\n                        onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"event-location\">Location</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"event-location\"\r\n                        required value={location}\r\n                        onChange={e => setLocation(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"event-tour\">Tour</label>\r\n                    <div>\r\n                        <Dropdown\r\n                            id=\"event-tour\" value={tour}\r\n                            options={[{ label: 'No tour', value: 'no-tour' }]}\r\n                            onChange={e => setTour(e.value)}\r\n                            style={{ width: '12em' }}\r\n                            editable={true} placeholder=\"Select if tour\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"event-designer\">Designer</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"event-designer\"\r\n                        required value={designer}\r\n                        onChange={e => setDesigner(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"event-date\">Event Date</label>\r\n                    <div>\r\n                        <Calendar\r\n                            id=\"event-date\"\r\n                            value={date}\r\n                            onChange={(e) => setDate(e.value)}\r\n                            showButtonBar={true} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <label htmlFor=\"event-tags \">Tags</label>\r\n                    <div >\r\n                        <Chips value={tags} onChange={(e) => setTags(e.value)} separator=','></Chips>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n                <div className=\"col-5\" />\r\n                <div className=\"col\" style={{ paddingLeft: '85px' }}>\r\n                    <button type=\"submit\" className=\"btn btn-success mb-2\" >Create event</button>{' '}\r\n                    <button type=\"button\" className=\"btn btn-secondary mb-2\" onClick={callback}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    events: selectEvents,\r\n    band: selectSelectedBand\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showMessage: message => dispatch(showMessage(message)),\r\n    fetchEvents: events => dispatch(fetchEvents(events))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateEvent)\r\n","import { Calendar } from 'primereact/calendar';\r\nimport { Chips } from 'primereact/chips';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { selectEvents } from '../../../redux/event/events.selector';\r\nimport { fetchEvents } from '../../../redux/event/events.actions';\r\nimport eventService from '../../../services/EventService';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport moment from 'moment';\r\n\r\nconst EditEvent = ({ band, callback, showMessage, events, fetchEvents, event }) => {\r\n    const [date, setDate] = useState(new Date(event.date));\r\n    const [tags, setTags] = useState(event.tags);\r\n    const [tour, setTour] = useState(event.tour);\r\n    const [name, setName] = useState(event.tour);\r\n    const [location, setLocation] = useState(event.location);\r\n    const [designer, setDesigner] = useState(event.designer);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const updateEvent = {\r\n            band: band.id,\r\n            date: new Date(date),\r\n            tags,\r\n            tour,\r\n            name,\r\n            location,\r\n            designer\r\n        };\r\n        eventService.update(event.id,updateEvent)\r\n            .then(event => {\r\n                callback();\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Event updated' });\r\n                return event;\r\n            })\r\n            .then(newEvent => fetchEvents(events.map( ev => {\r\n                if (ev.id === event.id) return {...newEvent, date: moment(newEvent.date).format(\"MMM Do YYYY\")};\r\n                else return ev;\r\n            })))\r\n            .catch(e => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update event\" })\r\n            });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"edit-event-name\">Event Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"edit-event-name\"\r\n                        required value={name}\r\n                        onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"edit-event-location\">Location</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"edit-event-location\"\r\n                        required value={location}\r\n                        onChange={e => setLocation(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"edit-event-tour\">Tour</label>\r\n                    <div>\r\n                        <Dropdown\r\n                            id=\"edit-event-tour\" value={tour}\r\n                            options={[{ label: 'No tour', value: 'no-tour' }]}\r\n                            onChange={e => setTour(e.value)}\r\n                            style={{ width: '12em' }}\r\n                            editable={true} placeholder=\"Select if tour\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"edit-event-designer\">Designer</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"edit-event-designer\"\r\n                        required value={designer}\r\n                        onChange={e => setDesigner(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"col mb-3\">\r\n                    <label htmlFor=\"edit-event-date\">Event Date</label>\r\n                    <div>\r\n                        <Calendar\r\n                            id=\"edit-event-date\"\r\n                            value={date}\r\n                            onChange={(e) => setDate(e.value)}\r\n                            showButtonBar={true} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <label htmlFor=\"edit-event-tags \">Tags</label>\r\n                    <div >\r\n                        <Chips value={tags} onChange={(e) => setTags(e.value)} separator=','></Chips>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n                <div className=\"col-5\" />\r\n                <div className=\"col\" style={{ paddingLeft: '85px' }}>\r\n                    <button type=\"submit\" className=\"btn btn-success mb-2\" >Edit event</button>{' '}\r\n                    <button type=\"button\" className=\"btn btn-secondary mb-2\" onClick={callback}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    events: selectEvents,\r\n    band: selectSelectedBand\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showMessage: message => dispatch(showMessage(message)),\r\n    fetchEvents: events => dispatch(fetchEvents(events))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditEvent)\r\n","import React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nconst TagTemplate = (rowData, column) => {\r\n    return rowData.tags.length ? rowData.tags.map((tag,index) => (\r\n        <React.Fragment key={index}>\r\n            <span className=\"h6\" key={index}><Badge variant=\"primary\" style={{ padding: '6px' }}>{tag}</Badge></span>{' '}\r\n        </React.Fragment>\r\n    )) : 'No tags'\r\n}\r\n\r\nexport default TagTemplate;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { fetchEvents } from '../../../redux/event/events.actions';\r\nimport { selectEvents } from '../../../redux/event/events.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport eventService from '../../../services/EventService';\r\nimport TableHeader from '../../table-header';\r\nimport CreateEvent from './create-event';\r\nimport EditEvent from './edit-event';\r\nimport TagsTemplate from './tag-template';\r\nimport moment from 'moment';\r\n\r\nconst BandEvents = ({ band, events, fetchEvents, showMessage }) => {\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [isDialogDisplaying, setIsDialogDisplaying] = useState(false);\r\n    const [isConfirmDialogDisplaying, setIsConfirmDialogDisplaying] = useState(false);\r\n    const [eventToBeDeleted, setEventToBeDeleted] = useState(null);\r\n    const [isEditDialogDisplaying, setIsEditDialogDisplaying] = useState(false);\r\n    const [eventToEdit, setEventToEdit] = useState(null);\r\n\r\n    useEffect(() => {\r\n        eventService.eventsByBand(band.id)\r\n            .then(events => {\r\n                const newEvents = events.map(\r\n                    event => ({\r\n                        ...event,\r\n                        date: moment(event.date).format(\"MMM Do YYYY\")\r\n                    }));\r\n                fetchEvents(newEvents);\r\n            })\r\n            .catch(error => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't fetch events\" });\r\n            });\r\n    }, []);\r\n\r\n\r\n    const handleDelete = () => {\r\n        eventService.delete(eventToBeDeleted.id)\r\n            .then(() => {\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Event deleted' });\r\n                setIsConfirmDialogDisplaying(false)\r\n                fetchEvents(events.filter(event => event.id !== eventToBeDeleted.id));\r\n                setEventToBeDeleted(null);\r\n            })\r\n            .catch(() => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't delete event\" });\r\n                setIsConfirmDialogDisplaying(false)\r\n            });\r\n    }\r\n\r\n    const deleteBodyTemplate = (rowData) => {\r\n        const handleClick = (data) => {\r\n            setEventToBeDeleted(data);\r\n            setIsConfirmDialogDisplaying(true);\r\n        };\r\n        return (\r\n            <Button\r\n                type=\"button\"\r\n                icon=\"pi pi-trash\"\r\n                className=\"p-button-secondary\"\r\n                onClick={() => handleClick(rowData)} />\r\n        );\r\n    };\r\n\r\n    const editBodyTemplate = (rowData) => {\r\n        const handleClick = (data) => {\r\n            setEventToEdit(data);\r\n            setIsEditDialogDisplaying(true);\r\n        };\r\n        return (\r\n            <Button\r\n                type=\"button\"\r\n                icon=\"pi pi-pencil\"\r\n                className=\"p-button-secondary\"\r\n                onClick={() => handleClick(rowData)} />\r\n        );\r\n    };\r\n\r\n    const renderUpdateModal = (\r\n        <Modal\r\n            show={isEditDialogDisplaying}\r\n            onHide={() => setIsEditDialogDisplaying(false)}\r\n            dialogClassName=\"modal-dialog-centered\"\r\n            aria-labelledby=\"modal-title\"\r\n            onExiting={() => setIsEditDialogDisplaying(false)}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"modal-title\">\r\n                    Edit event\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <EditEvent\r\n                    event={eventToEdit}\r\n                    callback={() => setIsEditDialogDisplaying(false)} />\r\n            </Modal.Body>\r\n            <Modal.Footer />\r\n        </Modal>)\r\n\r\n    const renderDeleteModal = (\r\n        <Modal show={isConfirmDialogDisplaying} onHide={() => setIsConfirmDialogDisplaying(false)} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm deletion</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {`You are about to delete ${eventToBeDeleted?.name} are you sure?`}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button className=\"btn btn-danger\" onClick={handleDelete}>\r\n                    Delete\r\n                </button>\r\n                <button className=\"btn btn-secondary\" onClick={() => setIsConfirmDialogDisplaying(false)}>\r\n                    Close\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {renderDeleteModal}\r\n            {renderUpdateModal}\r\n            <Modal\r\n\r\n                show={isDialogDisplaying}\r\n                onHide={() => setIsDialogDisplaying(false)}\r\n                dialogClassName=\"modal-dialog-centered\"\r\n                aria-labelledby=\"modal-title\"\r\n                onExiting={() => setIsDialogDisplaying(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"modal-title\">\r\n                        Add event\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <CreateEvent\r\n                        callback={() => setIsDialogDisplaying(false)} />\r\n                </Modal.Body>\r\n            </Modal>\r\n            <DataTable className=\"animated faster fadeIn\"\r\n                header={\r\n                    <TableHeader\r\n                        buttonText=\"Add event\"\r\n                        isDialogDisplaying={isDialogDisplaying}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                        setIsDialogDisplaying={setIsDialogDisplaying} />\r\n                }\r\n                scrollable scrollHeight=\"40vh\"\r\n                value={events}\r\n                globalFilter={globalFilter} sortField=\"name\"\r\n                selectionMode=\"single\">\r\n                <Column field=\"name\" header=\"Name\" sortable />\r\n                <Column field=\"date\" header=\"Date\" sortable style={{ width: '15%', textAlign: 'center' }} />\r\n                <Column field=\"location\" header=\"Location\" sortable />\r\n                <Column field=\"designer\" header=\"Designer\" sortable />\r\n                <Column field=\"tags\" header=\"Tags\" sortable body={TagsTemplate} />\r\n                <Column body={editBodyTemplate} headerStyle={{ width: '4em', textAlign: 'center' }} bodyStyle={{ textAlign: 'center', overflow: 'visible' }} />\r\n                <Column body={deleteBodyTemplate} headerStyle={{ width: '4em', textAlign: 'center' }} bodyStyle={{ textAlign: 'center', overflow: 'visible' }} />\r\n            </DataTable>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    events: selectEvents,\r\n    band: selectSelectedBand\r\n});\r\n\r\nconst mapDispatchTopProps = dispatch => ({\r\n    showMessage: message => dispatch(showMessage(message)),\r\n    fetchEvents: events => dispatch(fetchEvents(events))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchTopProps\r\n)(BandEvents);","import MusicianActionTypes from './musician.types';\r\n\r\nconst {FETCH_MUSICIANS_FAILURE, FETCH_MUSICIANS_SUCCESS} = MusicianActionTypes;\r\n\r\nexport const fetchMusiciansSuccess = (musicians) => ({\r\n    type: FETCH_MUSICIANS_SUCCESS,\r\n    payload: musicians\r\n});\r\n\r\nexport const fetchMusiciansFailure = (error) => ({\r\n    type: FETCH_MUSICIANS_FAILURE,\r\n    payload: error\r\n});","import {createSelector} from 'reselect';\r\n\r\nexport const musicians = state => state.musician\r\n\r\nexport const selectMusicians = createSelector(\r\n    [musicians],\r\n    musiciansState => musiciansState.musicians\r\n)","import BaseService from './BaseService';\r\n\r\nclass MusicianService extends BaseService{\r\n    constructor(){\r\n        super('musician');\r\n    }\r\n\r\n    async getAll(id){\r\n        return super.getAll({query:'band', id});\r\n    }\r\n}\r\n\r\nexport default new MusicianService();","export default  [\r\n    { label: 'Voice', value: 'Voice' },\r\n    { label: 'Guitar', value: 'Guitar' },\r\n    { label: 'Bass', value: 'Bass' },\r\n    { label: 'Drums', value: 'Drums' },\r\n];","import { Dropdown } from 'primereact/dropdown';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { fetchMusiciansSuccess } from '../../../redux/musician/musician.actions';\r\nimport { selectMusicians } from '../../../redux/musician/musician.selector';\r\nimport musicianService from '../../../services/MusicianService';\r\nimport options from './instruments-options';\r\n\r\n\r\nconst AddBandMember = ({ callback, selectedBand, musicians, fetchMusicians, showMessage }) => {\r\n    const [selectedInstrument, setSelectedInstrument] = useState('');\r\n    const [email, setEmail] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const musician = {\r\n            instrument: selectedInstrument,\r\n            email,\r\n            band: selectedBand.id\r\n        }\r\n        musicianService.create(musician)\r\n            .then(musician => {\r\n                setTimeout(callback, 1000);\r\n                showMessage({ life: 650, severity: 'success', summary: 'Success', detail: 'Member added' });\r\n                return musicianService.getById(musician.id)\r\n            })\r\n            .then(musician => {\r\n                const { band, instrument, id, email, user } = musician;\r\n                return {\r\n                    band,\r\n                    instrument, //transform to Pascal case\r\n                    email,\r\n                    id,\r\n                    status: user ? 'Active' : 'Pending',\r\n                    username: user?.username,\r\n                    name: user?.displayName\r\n                };\r\n            })\r\n            .then(newMusician => fetchMusicians(musicians.concat(newMusician)))\r\n            .catch(e => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't add member\" });\r\n            });\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group row\">\r\n                    <label htmlFor=\"inputEmail3\" className=\"col-sm-3 col-form-label h6\">Email</label>\r\n                    <div class=\"col-sm-9\">\r\n                        <input value={email} onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" id=\"inputEmail3\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label htmlFor=\"member-instrument\" className=\"col-sm-3 col-form-label h6\">Instrument</label>\r\n                    <div class=\"col-sm-9\">\r\n                        <Dropdown options={options} value={selectedInstrument} onChange={e => setSelectedInstrument(e.value)} placeholder=\"Select an instrument\" id=\"member-instrument\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-7\" />\r\n                    <div className=\"col\" style={{ paddingLeft: '43px' }}>\r\n                        <button type=\"submit\" className=\"btn btn-success mb-2\">Submit</button>{' '}\r\n                        <button type=\"button\" className=\"btn btn-secondary mb-2\" onClick={callback}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    selectedBand: selectSelectedBand,\r\n    musicians: selectMusicians\r\n});\r\nconst mapDispatchTopProps = dispatch => ({\r\n    fetchMusicians: musicians => dispatch(fetchMusiciansSuccess(musicians)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchTopProps)(AddBandMember);","import { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { fetchMusiciansFailure, fetchMusiciansSuccess } from '../../../redux/musician/musician.actions';\r\nimport { selectMusicians } from '../../../redux/musician/musician.selector';\r\nimport musicianService from '../../../services/MusicianService';\r\nimport TableHeader from '../../table-header';\r\nimport AddBandMember from './add-band-member';\r\nimport options from './instruments-options';\r\n\r\nconst BandMembers = ({ musicians, fetchMusicians, band, fetchFailure, showMessage }) => {\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [isDialogDisplaying, setIsDialogDisplaying] = useState(false);\r\n    const [isConfirmDialogDisplaying, setIsConfirmDialogDisplaying] = useState(false);\r\n    const [isUpdateDialogDisplaying, setIsUpdateDialogDisplaying] = useState(false);\r\n    const [musicianToBeModified, setMusicianToBeModified] = useState(null);\r\n    const [selectedInstrument, setSelectedInstrument] = useState('');\r\n\r\n    useEffect(() => {\r\n        musicianService.getAll(band.id)\r\n            .then(results => {\r\n                const newMusicians = results.map(\r\n                    result => {\r\n                        const { band, instrument, email, id, user } = result;\r\n                        return {\r\n                            band,\r\n                            instrument,\r\n                            email,\r\n                            id,\r\n                            status: user ? 'Active' : 'Pending',\r\n                            username: user?.username,\r\n                            name: user?.displayName\r\n                        };\r\n                    }\r\n                );\r\n\r\n                fetchMusicians(newMusicians);\r\n            })\r\n            .catch(error => {\r\n                fetchFailure(error);\r\n            })\r\n    }, []);\r\n\r\n    const handleUpdate = () => {\r\n        musicianService.update(musicianToBeModified.id, { instrument: selectedInstrument })\r\n            .then(e => {\r\n                fetchMusicians(musicians.map(\r\n                    musician => {\r\n                        const { band, email, id, status, username, name } = musician;\r\n                        if (musicianToBeModified.id === id)\r\n                            return {\r\n                                band,\r\n                                email,\r\n                                id,\r\n                                status,\r\n                                username,\r\n                                name,\r\n                                instrument: [selectedInstrument[0].toUpperCase(), selectedInstrument.slice(1)].join('')\r\n                            }\r\n                        else return musician;\r\n\r\n                    }));\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Member edited!' });\r\n                setIsUpdateDialogDisplaying(false);\r\n                setMusicianToBeModified(null);\r\n            })\r\n            .catch(() => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't edit member\" });\r\n                setIsUpdateDialogDisplaying(false);\r\n            })\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        musicianService.delete(musicianToBeModified.id)\r\n            .then(e => {\r\n                fetchMusicians(musicians.filter(musician => musician.id !== musicianToBeModified.id));\r\n                setMusicianToBeModified(null);\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Member deleted' });\r\n                setIsConfirmDialogDisplaying(false)\r\n            })\r\n            .catch(() => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't delete member\" });\r\n                setIsConfirmDialogDisplaying(false)\r\n            });\r\n    }\r\n\r\n    const deleteBodyTemplate = (rowData) => {\r\n        const handleClick = (data) => {\r\n            setMusicianToBeModified(data);\r\n            setIsConfirmDialogDisplaying(true);\r\n        };\r\n        return (\r\n            <Button type=\"button\" icon=\"pi pi-trash\" className=\"p-button-secondary\" onClick={() => handleClick(rowData)}></Button>\r\n        );\r\n    };\r\n\r\n    const editBodyTemplate = (rowData) => {\r\n        const handleClick = (data) => {\r\n            setMusicianToBeModified(data);\r\n            setIsUpdateDialogDisplaying(true);\r\n        };\r\n        return (\r\n            <Button type=\"button\" icon=\"pi pi-pencil\" className=\"p-button-secondary\"\r\n                onClick={() => handleClick(rowData)} />\r\n        );\r\n    };\r\n\r\n    const renderDeleteModal = (\r\n        <Modal show={isConfirmDialogDisplaying} onHide={() => setIsConfirmDialogDisplaying(false)} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm deletion</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {`You are about to delete ${musicianToBeModified?.username} are you sure?`}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button className=\"btn btn-danger\" onClick={handleDelete}>\r\n                    Delete\r\n                    </button>\r\n                <button className=\"btn btn-secondary\" onClick={() => setIsConfirmDialogDisplaying(false)}>\r\n                    Close\r\n                    </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    const renderUpdateModal = (\r\n        <Modal show={isUpdateDialogDisplaying} onHide={() => setIsUpdateDialogDisplaying(false)} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm update</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <>\r\n                    <p><strong>{`You can only edit ${musicianToBeModified?.username}'s instrument`}</strong></p>\r\n                    <div className=\"spacer-mini\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <label htmlFor=\"member-instrument\" className=\"col-sm-3 col-form-label h6\">Instrument</label>\r\n                            <div class=\"col-sm-9\">\r\n                                <Dropdown options={options} value={selectedInstrument} onChange={e => setSelectedInstrument(e.value)} placeholder=\"Select an instrument\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n                    Edit\r\n                </button>\r\n                <button className=\"btn btn-secondary\" onClick={() => setIsUpdateDialogDisplaying(false)}>\r\n                    Close\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {renderDeleteModal}\r\n            {renderUpdateModal}\r\n            <Modal\r\n                show={isDialogDisplaying}\r\n                onHide={() => setIsDialogDisplaying(false)}\r\n                dialogClassName=\"modal-90w\"\r\n                aria-labelledby=\"modal-title\"\r\n                centered\r\n                onExiting={() => setIsDialogDisplaying(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"modal-title\">\r\n                        Add band member\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <AddBandMember callback={() => setIsDialogDisplaying(false)} />\r\n                </Modal.Body>\r\n                <Modal.Footer />\r\n            </Modal>\r\n            <DataTable id=\"band-members-table\" value={musicians}\r\n                className=\"animated faster fadeIn \"\r\n                resizableColumns={true}\r\n                header={\r\n                    <TableHeader\r\n                        buttonText=\"Add member\"\r\n                        isDialogDisplaying={isDialogDisplaying}\r\n                        setGlobalFilte={setGlobalFilter}\r\n                        setIsDialogDisplaying={setIsDialogDisplaying} />\r\n                }\r\n                scrollable scrollHeight=\"40vh\"\r\n                globalFilter={globalFilter} sortField=\"name\"\r\n                selectionMode=\"single\">\r\n                <Column field=\"name\" header=\"Name\" sortable style={{ width: '25%', textAlign: 'center' }} />\r\n                <Column field=\"username\" header=\"Username\" sortable style={{ width: '13%', textAlign: 'center' }} />\r\n                <Column field=\"email\" header=\"Email\" sortable style={{ textAlign: 'center' }} />\r\n                <Column field=\"instrument\" header=\"Instrument\" sortable style={{ width: '13%', textAlign: 'center' }} />\r\n                <Column field=\"status\" header=\"Status\" style={{ width: '15%', textAlign: 'center' }} sortable />\r\n                <Column body={editBodyTemplate} headerStyle={{ width: '4em', textAlign: 'center' }} bodyStyle={{ textAlign: 'center', overflow: 'visible' }} />\r\n                <Column body={deleteBodyTemplate} headerStyle={{ width: '4em', textAlign: 'center' }} bodyStyle={{ textAlign: 'center', overflow: 'visible' }} />\r\n            </DataTable>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    musicians: selectMusicians,\r\n    band: selectSelectedBand\r\n});\r\n\r\nconst mapDispatchTopProps = dispatch => ({\r\n    fetchMusicians: musicians => dispatch(fetchMusiciansSuccess(musicians)),\r\n    fetchFailure: error => dispatch(fetchMusiciansFailure(error)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchTopProps\r\n)(BandMembers);","import SongActionsTypes from './song.types';\r\n\r\nconst {FETCH_SONGS, SELECT_SONG} = SongActionsTypes;\r\n\r\nexport const fetchSongs = (songs) => ({\r\n    type: FETCH_SONGS,\r\n    payload: songs\r\n});\r\n\r\nexport const selectSong = (song) => ({\r\n    type: SELECT_SONG,\r\n    payload: song\r\n})","import {createSelector} from 'reselect';\r\n\r\nexport const songs = state => state.song;\r\n\r\nexport const selectSelectedSong = createSelector(\r\n    [songs],\r\n    songsState => songsState.song\r\n)\r\n\r\nexport const selectSongs = createSelector(\r\n    [songs],\r\n    songsState => songsState.songs\r\n)","import BaseService from './BaseService';\r\n\r\nclass SongService extends BaseService{\r\n    constructor(){\r\n        super('song');\r\n    }\r\n\r\n    async getAll(id){\r\n        return super.getAll({query:'band', id})\r\n    }\r\n}\r\n\r\nexport default new SongService();","import { Chips } from 'primereact/chips';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { fetchSongs } from '../../../redux/song/song.actions';\r\nimport { selectSongs } from '../../../redux/song/song.selector';\r\nimport songService from '../../../services/SongService';\r\n\r\nconst AddSong = ({ callback, selectedBand, songs, fetchSongs }) => {\r\n    const [name, setName] = useState('');\r\n    const [tempo, setTempo] = useState(null);\r\n    const [tags, setTags] = useState([]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const song = { band: selectedBand.id, name, tempo, tags };\r\n        songService.create(song)\r\n            .then(song => {\r\n                callback();\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Song added' });\r\n                return song;\r\n            })\r\n            .then(newSong => fetchSongs(songs.concat(newSong)))\r\n            .catch(e => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't add song\" })\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group row\">\r\n                    <label htmlFor=\"song-name\" className=\"col-sm-2 col-form-label\">Name</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input onChange={(e) => setName(e.target.value)} type=\"text\" className=\"form-control\" id=\"song-name\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label htmlFor=\"song-tempo\" className=\"col-sm-2 col-form-label\">Tempo</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input onChange={(e) => setTempo(e.target.value)} type=\"number\" className=\"form-control\" id=\"song-tempo\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label htmlFor=\"song-tags\" className=\"col-sm-2 col-form-label\">Tags</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <Chips value={tags} onChange={(e) => setTags(e.value)} separator=','></Chips>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <div className=\"col-6\" />\r\n                    <div className=\"col\" style={{ paddingLeft: '52px' }}>\r\n                        <button type=\"submit\" className=\"btn btn-success mb-2\" >Create song</button>{' '}\r\n                        <button type=\"button\" className=\"btn btn-secondary mb-2\" onClick={callback}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n    songs: selectSongs,\r\n    selectedBand: selectSelectedBand\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchSongs: songs => dispatch(fetchSongs(songs)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddSong);","import { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { fetchSongs, selectSong } from '../../../redux/song/song.actions';\r\nimport { selectSongs } from '../../../redux/song/song.selector';\r\nimport songService from '../../../services/SongService';\r\nimport TableHeader from '../../table-header';\r\nimport AddSong from './add-song';\r\nimport TagsTemplate from './tag-template';\r\n\r\nconst BandSongs = ({ songs, band, fetchSongs, selectSong, showMessage }) => {\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [isDialogDisplaying, setIsDialogDisplaying] = useState(false);\r\n    const [isConfirmDialogDisplaying, setIsConfirmDialogDisplaying] = useState(false);\r\n    const [songToBeDeleted, setSongToBeDeleted] = useState(null);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        songService.getAll(band.id)\r\n            .then(songs => {\r\n                fetchSongs(\r\n                    songs\r\n                );\r\n            });\r\n    }, []);\r\n\r\n    const handleDelete = () => {\r\n        songService.delete(songToBeDeleted.id)\r\n            .then(() => {\r\n                setIsConfirmDialogDisplaying(false)\r\n                fetchSongs(songs.filter(song => song.id !== songToBeDeleted.id));\r\n                setSongToBeDeleted(null);\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Member deleted' });\r\n            })\r\n            .catch(() => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't delete member\" });\r\n                setIsConfirmDialogDisplaying(false)\r\n            });\r\n    }\r\n\r\n    const deleteBodyTemplate = (rowData) => {\r\n        const handleClick = (data) => {\r\n            setSongToBeDeleted(data);\r\n            setIsConfirmDialogDisplaying(true);\r\n        };\r\n        return (\r\n            <Button\r\n                type=\"button\"\r\n                icon=\"pi pi-trash\"\r\n                className=\"p-button-secondary\"\r\n                onClick={() => handleClick(rowData)} />\r\n        );\r\n    };\r\n\r\n    const editBodyTemplate = (rowData) => {\r\n        const handleClick = (data) => {\r\n            selectSong(data);\r\n            history.push(`/bands/${band.id}/songs/${data.id}`);\r\n        };\r\n        return (\r\n            <Button\r\n                type=\"button\"\r\n                icon=\"pi pi-pencil\"\r\n                className=\"p-button-secondary\"\r\n                onClick={() => handleClick(rowData)} />\r\n        );\r\n    };\r\n\r\n    const renderDeleteModal = (\r\n        <Modal show={isConfirmDialogDisplaying} onHide={() => setIsConfirmDialogDisplaying(false)} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm deletion</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {`You are about to delete ${songToBeDeleted?.name} are you sure?`}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button className=\"btn btn-danger\" onClick={handleDelete}>\r\n                    Delete\r\n                </button>\r\n                <button className=\"btn btn-secondary\" onClick={() => setIsConfirmDialogDisplaying(false)}>\r\n                    Close\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {renderDeleteModal}\r\n            <Modal\r\n                show={isDialogDisplaying}\r\n                onHide={() => setIsDialogDisplaying(false)}\r\n                dialogClassName=\"modal-dialog-centered\"\r\n                aria-labelledby=\"modal-title\"\r\n                onExiting={() => setIsDialogDisplaying(false)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"modal-title\">\r\n                        Add song\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <AddSong callback={() => setIsDialogDisplaying(false)} />\r\n                </Modal.Body>\r\n                <Modal.Footer />\r\n            </Modal>\r\n            <DataTable value={songs} className=\"animated faster fadeIn\"\r\n                header={\r\n                    <TableHeader\r\n                        buttonText=\"Add song\"\r\n                        isDialogDisplaying={isDialogDisplaying}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                        setIsDialogDisplaying={setIsDialogDisplaying} />\r\n                }\r\n                scrollable scrollHeight=\"40vh\"\r\n                globalFilter={globalFilter} sortField=\"name\">\r\n                <Column field=\"name\" header=\"Name\" sortable />\r\n                <Column field=\"tags\" header=\"Tags\" body={TagsTemplate} />\r\n                <Column field=\"tempo\" header=\"Tempo\" sortable />\r\n                <Column body={editBodyTemplate} headerStyle={{ width: '4em', textAlign: 'center' }} bodyStyle={{ textAlign: 'center', overflow: 'visible' }} />\r\n                <Column body={deleteBodyTemplate} headerStyle={{ width: '4em', textAlign: 'center' }} bodyStyle={{ textAlign: 'center', overflow: 'visible' }} />\r\n            </DataTable>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    band: selectSelectedBand,\r\n    songs: selectSongs\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectSong: song => dispatch(selectSong(song)),\r\n    fetchSongs: songs => dispatch(fetchSongs(songs)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(BandSongs);","export default  [\r\n    { label: 'Lead Guitar', value: 'Lead Guitar' },\r\n    { label: 'Bass', value: 'Bass' },\r\n    { label: 'Drums', value: 'Drums' },\r\n];","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport environment from 'environment';\r\nimport options from './sheets-options';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectSelectedSong } from '../../../redux/song/song.selector';\r\nimport { selectSong } from '../../../redux/song/song.actions';\r\nimport songService from '../../../services/SongService';\r\n\r\nconst baseUrl = environment.api;\r\n\r\nconst SheetUploader = ({ callback, showMessage, song, selectSong }) => {\r\n\r\n    const [instrument, setInstrument] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let updateSheets = [];\r\n        if (song.sheets.length){\r\n            if(song.sheets.find(sheet => sheet.instrument === instrument)){\r\n                updateSheets = song.sheets.map( sheet => {\r\n                    if (sheet.instrument === instrument) return {instrument, content: imageUrl};\r\n                    else return sheet;\r\n                });\r\n            }else{\r\n                updateSheets = song.sheets.concat([{instrument, content: imageUrl}]);\r\n            }\r\n        }else {\r\n            updateSheets = [{instrument, content: imageUrl}]\r\n        }\r\n        const updateSong = {\r\n            ...song,\r\n            sheets: updateSheets\r\n        };\r\n        songService.update(song.id, updateSong)\r\n        .then(song => {\r\n            selectSong(song)\r\n            showMessage({ severity: 'success', summary: 'Success', detail: 'Sheet added!' });\r\n            callback();\r\n        })\r\n        .catch (() => showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't add sheet\" }));\r\n    }\r\n\r\n    const onUpload = (e) => {\r\n        showMessage({ severity: 'success', summary: 'Success', detail: 'File Uploaded' });\r\n        const response = JSON.parse(e.xhr.response);\r\n        setImageUrl(response.downloadUrl);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n                <label htmlFor=\"upload-sheet\" className=\"col-sm-2 col-form-label\">Sheets</label>\r\n                <div className=\"col-sm-10\">\r\n                    <FileUpload\r\n                        name=\"data\"\r\n                        id=\"upload-sheet\"\r\n                        multiple={false}\r\n                        auto\r\n                        url={`${baseUrl}/storage/upload/pdf`}\r\n                        onUpload={onUpload}\r\n                        accept=\"application/pdf\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n                <label htmlFor=\"sheet-type\" className=\"col-sm-2 col-form-label\">Type</label>\r\n                <div className=\"col-sm-10\">\r\n                    <Dropdown\r\n                        id=\"sheet-type\" value={instrument}\r\n                        options={options}\r\n                        onChange={e => setInstrument(e.value)}\r\n                        style={{ width: '12em' }}\r\n                        placeholder=\"Select sheet type\" />\r\n                    \r\n                </div>\r\n            </div>\r\n            <small>Sheet types are only limited by one by instrument</small>\r\n            <div className=\"spacer-mini\"/>\r\n            <div className=\"form-group row\">\r\n                <div className=\"col-6\" />\r\n                <div className=\"col\" style={{ paddingLeft: '65px' }}>\r\n                    <button type=\"submit\" className=\"btn btn-success mb-2\" >Add sheet</button>{' '}\r\n                    <button type=\"button\" className=\"btn btn-secondary mb-2\" onClick={callback}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    song: selectSelectedSong\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectSong: song => dispatch(selectSong(song)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SheetUploader)\r\n","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { connect } from 'react-redux'\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from \"primereact/column\";\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { selectSelectedSong } from '../../../redux/song/song.selector';\r\nimport SheetUploader from './sheet-uploader';\r\n\r\nconst CustomHeader = ({ lyricsCallback, setGlobalFilter, chordsCallback, isLyricsEdition, isChordsEdition, setIsDialogDisplaying }) => (\r\n    <div style={{ paddingTop: '2vh' }}>\r\n        <div className=\"d-flex flex-row justify-content-start\">\r\n            <div style={{ paddingBottom: '1vh', marginRight: '1vw' }}>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={lyricsCallback}>\r\n                    <span className=\"text-light\">\r\n                        {isLyricsEdition ? <i className=\"fas fa-edit\" /> : <i className=\"fas fa-plus-square\" />}\r\n                        {` ${isLyricsEdition ? 'Edit' : 'Add'} Lyrics`}\r\n                    </span>\r\n                </Button>\r\n            </div>\r\n            <div style={{ paddingBottom: '1vh', marginRight: '1vw' }}>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={chordsCallback}>\r\n                    <span className=\"text-light\">\r\n                        {isChordsEdition ? <i className=\"fas fa-edit\" /> : <i className=\"fas fa-plus-square\" />}\r\n                        {` ${isChordsEdition ? 'Edit' : 'Add'} Chords`}\r\n                    </span>\r\n                </Button>\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={() => setIsDialogDisplaying(true)}\r\n                >\r\n                    <span className=\"text-light\">\r\n                        {isChordsEdition ? <i className=\"fas fa-edit\" /> : <i className=\"fas fa-plus-square\" />}\r\n                        {`Manage sheets`}\r\n                    </span>\r\n                </Button>\r\n            </div>\r\n            <div style={{ paddingLeft: '32vw' }}>\r\n                <InputText type=\"search\" placeholder=\"Search\" onInput={(e) => setGlobalFilter(e.target.value)} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst ManageSongSheets = ({ band, song }) => {\r\n    const [isDialogDisplaying, setIsDialogDisplaying] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState('');\r\n    const history = useHistory();\r\n\r\n    const songSheetsFormated = ({ lyrics, sheets, chords }) => {\r\n        let formatedSheets = [{ key: '2-0', data: { name: 'No sheets' } }];\r\n        if (sheets) {\r\n            formatedSheets = sheets.map((sheet, index) => (\r\n                {\r\n                    key: `2-${index}`,\r\n                    data: {\r\n                        name: sheet?.instrument,\r\n                        type: sheet?.instrument,\r\n                        content: sheet?.content\r\n                    }\r\n                }));\r\n        }\r\n        console.log(formatedSheets);\r\n        return {\r\n            root: [\r\n                {\r\n                    key: 0,\r\n                    data: {\r\n                        name: 'Lyrics',\r\n                        type: 'Lyrics',\r\n                        content: lyrics\r\n                    }\r\n                },\r\n                {\r\n                    key: 1,\r\n                    data: {\r\n                        name: 'Chords',\r\n                        type: 'Chords',\r\n                        content: chords\r\n                    }\r\n                },\r\n                {\r\n                    key: 2,\r\n                    data: {\r\n                        name: 'Sheets',\r\n                        type: 'All sheets'\r\n                    },\r\n                    children: formatedSheets\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    const renderModal = (\r\n        <Modal\r\n            show={isDialogDisplaying}\r\n            onHide={() => setIsDialogDisplaying(false)}\r\n            dialogClassName=\"modal-dialog-centered\"\r\n            aria-labelledby=\"modal-title\"\r\n            onExiting={() => setIsDialogDisplaying(false)}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"modal-title\">\r\n                    Manage sheets\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <SheetUploader callback={() => setIsDialogDisplaying(false)} />\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n\r\n\r\n    const lyricsCallback = () => {\r\n        history.push(`/bands/${band.id}/songs/${song.id}/editor/lyrics`);\r\n    }\r\n\r\n    const chordsCallback = () => {\r\n        history.push(`/bands/${band.id}/songs/${song.id}/editor/chords`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {renderModal}\r\n            <TreeTable\r\n                className=\"animated faster fadeIn\"\r\n                value={songSheetsFormated(song).root}\r\n                globalFilter={globalFilter}\r\n                scrollable scrollHeight=\"40vh\"\r\n                header={\r\n                    <CustomHeader\r\n                        setGlobalFilter={setGlobalFilter}\r\n                        lyricsCallback={lyricsCallback}\r\n                        chordsCallback={chordsCallback}\r\n                        isLyricsEdition={song.lyrics}\r\n                        isChordsEdition={song.chords}\r\n                        setIsDialogDisplaying={setIsDialogDisplaying} />\r\n                }\r\n            >\r\n                <Column field=\"name\" header=\"Name\" expander />\r\n                <Column field=\"type\" header=\"Type\" />\r\n            </TreeTable>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    band: selectSelectedBand,\r\n    song: selectSelectedSong\r\n})\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(ManageSongSheets);","import { Editor } from \"primereact/editor\";\r\nimport { QuillDeltaToHtmlConverter as Converter } from 'quill-delta-to-html';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { selectSong } from '../../../redux/song/song.actions';\r\nimport { selectSelectedSong } from '../../../redux/song/song.selector';\r\nimport songService from '../../../services/SongService.js';\r\n\r\n\r\nconst header = (\r\n    <div className=\"ql-toolbar\">\r\n        <span className=\"ql-formats\">\r\n            <select className=\"ql-size\" aria-label=\"Size\" />\r\n        </span>\r\n        <span className=\"ql-formats\">\r\n            <button className=\"ql-bold\" aria-label=\"Bold\"></button>{' '}\r\n            <button className=\"ql-italic\" aria-label=\"Italic\"></button>{' '}\r\n            <button className=\"ql-underline\" aria-label=\"Underline\"></button>{' '}\r\n        </span>\r\n        <span className=\"ql-formats\">\r\n            <select className=\"ql-color\" aria-label=\"Font color\" />{' '}\r\n            <select className=\"ql-background\" />{' '}\r\n        </span>\r\n    </div>\r\n\r\n);\r\n\r\n\r\nexport const LyricsEditor = ({ song, selectSong, showMessage }) => {\r\n    const [editorState, setEditorState] = useState({});\r\n    const [editorText, setEditorText] = useState(new Converter(song?.lyrics?.ops).convert() || '');\r\n\r\n    const save = () => {\r\n        songService.update(song.id, { ...song, lyrics: { ops: editorState.ops } })\r\n            .then((song) => {\r\n                selectSong(song);\r\n                setEditorText(new Converter(song?.lyrics?.ops).convert());\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Lyrics edition succeded' });\r\n            })\r\n            .catch(() => showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update lyrics\" }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Editor style={{ height: '41vh' }} value={editorText} headerTemplate={header} onTextChange={(e) => setEditorState(e.source.compose(e.delta))} />\r\n            <div className=\"spacer-mini\" />\r\n            <div className=\"d-flex flex-row justify-content-start\">\r\n                <button className=\"btn btn-secondary\" style={{ width: '100px' }} onClick={save}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    song: selectSelectedSong\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectSong: song => dispatch(selectSong(song)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LyricsEditor)\r\n","import { Editor } from \"primereact/editor\";\r\nimport { QuillDeltaToHtmlConverter as Converter } from 'quill-delta-to-html';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport { selectSong } from '../../../redux/song/song.actions';\r\nimport { selectSelectedSong } from '../../../redux/song/song.selector';\r\nimport songService from '../../../services/SongService.js';\r\n\r\nconst header = (\r\n    <div className=\"ql-toolbar\">\r\n        <span className=\"ql-formats\">\r\n            <select className=\"ql-size\" aria-label=\"Size\" />\r\n        </span>\r\n        <span className=\"ql-formats\">\r\n            <button className=\"ql-bold\" aria-label=\"Bold\"></button>{' '}\r\n            <button className=\"ql-italic\" aria-label=\"Italic\"></button>{' '}\r\n            <button className=\"ql-underline\" aria-label=\"Underline\"></button>{' '}\r\n        </span>\r\n        <span className=\"ql-formats\">\r\n            <select className=\"ql-color\" aria-label=\"Font color\" />{' '}\r\n            <select className=\"ql-background\" />{' '}\r\n        </span>\r\n    </div>\r\n\r\n);\r\n\r\n\r\nexport const ChordsEditor = ({ song, showMessage, selectSong }) => {\r\n    const [editorState, setEditorState] = useState({});\r\n    const [editorText, setEditorText] = useState(new Converter(song?.chords?.ops).convert() || '');\r\n\r\n    const save = () => {\r\n        songService.update(song.id, { ...song, chords: { ops: editorState.ops } })\r\n            .then(song => {\r\n                selectSong(song);\r\n                setEditorText(new Converter(song?.chords?.ops).convert());\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Lyrics edition succeded' });\r\n                return song;\r\n            })\r\n            // .then((song) => history.push(`/bands/${song.band}/songs/${song.id}`))\r\n            .catch(() => showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update chords\" }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Editor style={{ height: '41vh' }} value={editorText} headerTemplate={header} onTextChange={(e) => setEditorState(e.source.compose(e.delta))} />\r\n            <div className=\"spacer-mini\" />\r\n            <div className=\"d-flex flex-row justify-content-start\">\r\n                <button className=\"btn btn-secondary\" style={{ width: '100px' }} onClick={save}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    song: selectSelectedSong\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectSong: song => dispatch(selectSong(song)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChordsEditor)\r\n","import React from 'react'\r\nimport { Switch } from 'react-router-dom';\r\nimport PrivateRoute from '../../../routing/PrivateRoute';\r\nimport ManageSongSheets from './manage-song-sheets';\r\nimport LyricsEditor from './lyrics-editor';\r\nimport ChordsEditor from './chords-editor';\r\nconst SongSheetsRouter = () => {\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute path=\"/bands/:id/songs/:songId/editor/sheet/:sheetName\" />\r\n            <PrivateRoute path=\"/bands/:id/songs/:songId/editor/sheet/new\" />\r\n            <PrivateRoute path=\"/bands/:id/songs/:songId/editor/chords\" component={ChordsEditor} />\r\n            <PrivateRoute path=\"/bands/:id/songs/:songId/editor/lyrics\" component={LyricsEditor} />\r\n            <PrivateRoute path=\"/bands/:id/songs/:songId\" component={ManageSongSheets} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default SongSheetsRouter;","import React from 'react'\r\nimport BandSongs from './band-songs';\r\nimport ManageSongSheets from '../song/manage-song-sheets';\r\nimport { Switch } from 'react-router-dom';\r\nimport PrivateRoute from '../../../routing/PrivateRoute';\r\nimport SongSheetsRouter from '../song/song-sheets-router';\r\n\r\nconst BandSongsRouter = () => {\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute path=\"/bands/:id/songs/:songId\" component={SongSheetsRouter} />\r\n            <PrivateRoute path=\"/bands/:id/songs\" component={BandSongs}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default BandSongsRouter;","import environment from 'environment';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport React, { useReducer, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../../redux/auth/auth.selector';\r\nimport { fetchBandsSuccess, selectBand } from '../../../redux/band/band.actions';\r\nimport { selectBands, selectSelectedBand } from '../../../redux/band/band.selector';\r\nimport { showMessage } from '../../../redux/growl/growl.actions';\r\nimport bandService from '../../../services/BandService';\r\nimport selected from '../../multiselect-selected';\r\nimport genreItems from '../genre-items';\r\n\r\nconst baseUrl = environment.api;\r\n\r\nconst reducer = (state, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case 'update':\r\n            return {\r\n                action: 'update',\r\n                message: `Are you sure you want to update ${payload}`\r\n            }\r\n        case 'mark_active':\r\n            return {\r\n                action: 'markActive',\r\n                message: `You are about to mark ${payload} as active. Are you sure?`\r\n            }\r\n        case 'mark_inactive':\r\n            return {\r\n                action: 'markInactive',\r\n                message: `You are about to mark ${payload} as inactive. Are you sure?`\r\n            }\r\n        default:\r\n            throw new Error('wrong action type');\r\n    }\r\n}\r\n\r\nconst EditBand = ({ user, selectedBand, updateSelectedBand, fetchBandsSuccess, bands, showMessage }) => {\r\n    const [genres, setGenres] = useState(selectedBand.genres.split(',').map(genre => genre.trim()));\r\n    const [imageUrl, setImageUrl] = useState(selectedBand.logo);\r\n    const [bandName, setBandName] = useState(selectedBand.name);\r\n    const [bandDescription, setBandDescription] = useState(selectedBand.description);\r\n    const [isBandActive, setIsBandActive] = useState(selectedBand.active === 'Active');\r\n    const [isConfirmDialogDisplaying, setIsConfirmDialogDisplaying] = useState(false);\r\n\r\n\r\n    const [actionState, dispatch] = useReducer(reducer, { action: {}, message: '' });\r\n\r\n    const onUpload = (e) => {\r\n        showMessage({ severity: 'success', summary: 'Success', detail: 'File Uploaded' });\r\n        const response = JSON.parse(e.xhr.response);\r\n        setImageUrl(response.downloadUrl);\r\n    }\r\n\r\n    const handleMark = (e) => {\r\n        if (actionState.action === 'markActive') {\r\n            bandService.update(selectedBand.id, { active: true })\r\n                .then(() => {\r\n                    setIsBandActive(true)\r\n                    setIsConfirmDialogDisplaying(false);\r\n                    const updatedBand = { ...selectedBand, active: 'Active' };\r\n                    updateSelectedBand(updatedBand);\r\n                    showMessage({ severity: 'success', summary: 'Success', detail: 'Band marked as active' });\r\n                    return updatedBand;\r\n                })\r\n                .then((band) => {\r\n                    fetchBandsSuccess(bands.concat(band));\r\n                })\r\n                .catch((error) => {\r\n                    showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update band\" });\r\n                    setIsConfirmDialogDisplaying(false);\r\n                });\r\n        }\r\n        if (actionState.action === 'markInactive') {\r\n            bandService.delete(selectedBand.id)\r\n                .then(() => {\r\n                    showMessage({ severity: 'success', summary: 'Success', detail: 'Band marked as inactive' });\r\n                    setIsBandActive(false);\r\n                    const updatedBand = { ...selectedBand, active: 'Inactive' };\r\n                    updateSelectedBand(updatedBand);\r\n                    setIsConfirmDialogDisplaying(false);\r\n                })\r\n                .then((band) => {\r\n                    fetchBandsSuccess(bands.concat(band));\r\n                })\r\n                .catch((error) => {\r\n                    showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update band\" });\r\n                    setIsConfirmDialogDisplaying(false);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const band = {\r\n            name: bandName,\r\n            description: bandDescription,\r\n            genres,\r\n            manager: user.id,\r\n            logo: imageUrl\r\n        };\r\n        bandService.update(selectedBand.id, band)\r\n            .then((band) => {\r\n                setIsConfirmDialogDisplaying(false);\r\n                const updatedBand = { ...band, genres: band.genres.join(', ') };\r\n                updateSelectedBand(updatedBand);\r\n                showMessage({ severity: 'success', summary: 'Success', detail: 'Band Updated' });\r\n                return updatedBand;\r\n            })\r\n            .then((band) => {\r\n                fetchBandsSuccess(bands.concat(band));\r\n            })\r\n            .catch((error) => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update band\" });\r\n            });\r\n    }\r\n\r\n    const handleButtonClick = (e) => {\r\n        const { id } = e.target;\r\n        console.log(id);\r\n        if (id === 'edit-band-save') {\r\n            dispatch({ type: 'update', payload: bandName });\r\n            setIsConfirmDialogDisplaying(true);\r\n        }\r\n        if (id === 'edit-band-mark' && isBandActive) {\r\n            dispatch({ type: 'mark_inactive', payload: bandName });\r\n            setIsConfirmDialogDisplaying(true);\r\n        }\r\n        if (id === 'edit-band-mark' && !isBandActive) {\r\n            dispatch({ type: 'mark_active', payload: bandName });\r\n            setIsConfirmDialogDisplaying(true);\r\n        }\r\n    }\r\n\r\n    const renderModal = (\r\n        <Modal show={isConfirmDialogDisplaying} onHide={() => setIsConfirmDialogDisplaying(false)} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm changes</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {actionState.message}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={actionState.action === 'update' ? handleSubmit : handleMark}>\r\n                    Confirm\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={() => setIsConfirmDialogDisplaying(false)}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {renderModal}\r\n            <div className=\"animated faster fadeIn\">\r\n                <form style={{ paddingLeft: '20px' }}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-5\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"h6\"><strong>Edit band logo</strong></label>\r\n                                <FileUpload name=\"data\"\r\n                                    url={`${baseUrl}/storage/upload/image`}\r\n                                    onUpload={onUpload}\r\n                                    auto\r\n                                    multiple={false} accept=\"image/*\" maxFileSize={1000000} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"h6\" htmlFor=\"band-name\"><strong>Band name</strong></label>\r\n                                <input defaultValue={bandName}\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"band-name\"\r\n                                    onChange={(e) => setBandName(e.target.value)} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"h6\" htmlFor=\"band-description\"><strong>Band description</strong></label>\r\n                                <textarea className=\"form-control\" id=\"band-description\" rows=\"3\" onChange={(e) => setBandDescription(e.target.value)} defaultValue={bandDescription} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"row\">\r\n                                    <label className=\"h6 col\" htmlFor=\"band-genres\">\r\n                                        <strong>Band genres</strong>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <MultiSelect\r\n                                            style={{ width: '70%', minWidth: '12em' }}\r\n                                            maxSelectedLabels={10}\r\n                                            placeholder=\"Select genres\"\r\n                                            optionLabel=\"label\"\r\n                                            optionValue=\"value\"\r\n                                            id=\"Band-genres\"\r\n                                            value={genres}\r\n                                            options={genreItems}\r\n                                            onChange={(e) => setGenres(e.value)}\r\n                                            selectedItemTemplate={selected}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row justify-content-end\">\r\n                            <Button \r\n                                id=\"edit-band-save\" \r\n                                variant=\"success\" \r\n                                type=\"button\" \r\n                                onClick={handleButtonClick}\r\n                                style={{marginRight: '0.5vw'}}>\r\n                                    Save\r\n                            </Button>\r\n                            <Button \r\n                                id=\"edit-band-mark\" \r\n                                variant=\"secondary\" \r\n                                type=\"button\" \r\n                                onClick={handleButtonClick}>\r\n                                    {`Mark as ${isBandActive ? 'inactive' : 'active'}`}\r\n                            </Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser,\r\n    selectedBand: selectSelectedBand,\r\n    bands: selectBands\r\n});\r\n\r\nconst mapDispatchTopProps = dispatch => ({\r\n    updateSelectedBand: (band) => dispatch(selectBand(band)),\r\n    fetchBandsSuccess: (bands) => dispatch(fetchBandsSuccess(bands)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchTopProps)(EditBand);","import React from 'react'\r\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\r\nimport './top-bar-element.css';\r\n\r\nconst BandTopBarElement = ({text}) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const {id} = useParams();\r\n    const selected = location.pathname.match(`/bands/${id}/${text.toLowerCase()}`);\r\n\r\n    return (\r\n        <div className={`center col tbe-selectable ${selected ? 'tbe-selected' : ''}`}\r\n            onClick={() => history.push(`/bands/${id}/${text.toLowerCase()}`)}>\r\n            <h6><strong>{text}</strong></h6>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default BandTopBarElement;","import React from 'react'\r\nimport BandTopBarElement from './band-topbar-element';\r\nconst elementsInfo = ['Members', 'Songs', 'Events', 'Edit'];\r\n\r\nconst renderTopBandElements = elementsInfo.map(\r\n    (elementName, index) => (\r\n        <BandTopBarElement key={index} text={elementName}/>\r\n    )\r\n);\r\n\r\nconst BandTopBar = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n                {renderTopBandElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BandTopBar;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Switch, useParams } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport BandTitle from '../../components/manage-bands/band-title';\r\nimport BandEvents from '../../components/manage-bands/band/band-events';\r\nimport BandMembers from '../../components/manage-bands/band/band-members';\r\nimport BandSongsRouter from '../../components/manage-bands/band/band-songs-router';\r\nimport EditBand from '../../components/manage-bands/band/edit-band';\r\nimport BandTopBar from '../../components/manage-bands/topbar/band-topbar';\r\nimport { selectBand } from '../../redux/band/band.actions';\r\nimport { selectSelectedBand } from '../../redux/band/band.selector';\r\nimport PrivateRoute from '../../routing/PrivateRoute';\r\n\r\nconst ViewBand = ({ selectedBand, selectBand }) => {\r\n    const { id } = useParams();\r\n\r\n    if (id !== selectedBand.id) return <Redirect to=\"/bands\" />\r\n\r\n    return (\r\n        <div className=\"container-fluid animated faster fadeIn\" style={{ padding: '20px' }}>\r\n            <Card className=\"shadowed\" style={{ padding: '20px' }}>\r\n                <Card.Body>\r\n                    <BandTitle />\r\n                    <hr />\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <BandTopBar />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"spacer-mini\" />\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <Switch>\r\n                                <PrivateRoute path=\"/bands/:id/members\" component={BandMembers} />\r\n                                <PrivateRoute path=\"/bands/:id/songs\" component={BandSongsRouter} />\r\n                                <PrivateRoute path=\"/bands/:id/events\" component={BandEvents} />\r\n                                <PrivateRoute path=\"/bands/:id/edit\" component={EditBand} />\r\n                                <Redirect from=\"/bands/:id\" to=\"/bands/:id/members\" />\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    selectedBand: selectSelectedBand\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectBand: band => dispatch(selectBand(band))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewBand);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { fetchBandsFailure, fetchBandsSuccess } from '../../redux/band/band.actions';\r\nimport { selectBands } from '../../redux/band/band.selector';\r\nimport PrivateRoute from '../../routing/PrivateRoute';\r\nimport bandService from '../../services/BandService';\r\nimport BandsOverview from './bands-overview';\r\nimport ViewBand from './view-band';\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nconst ManageBandsPage = ({ fetchBandsFailure, fetchBandsSuccess, user, showMessage }) => {\r\n\r\n    useEffect(() => {\r\n        bandService.getAll(user.id)\r\n            .then(bands => {\r\n                fetchBandsSuccess(\r\n                    bands.map(\r\n                        band => ({\r\n                            ...band,\r\n                            active: band.active ? 'Active' : 'Inactive',\r\n                            genres: band.genres.join(', ')\r\n                        })\r\n                    ));\r\n            })\r\n            .catch(error => {\r\n                fetchBandsFailure(error);\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't fetch bands try later\" })\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute path=\"/bands/:id\" component={ViewBand} />\r\n            <PrivateRoute component={BandsOverview} />\r\n        </Switch>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    bands: selectBands,\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchBandsSuccess: bands => dispatch(fetchBandsSuccess(bands)),\r\n    fetchBandsFailure: error => dispatch(fetchBandsFailure(error)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ManageBandsPage);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectEvents } from '../../redux/event/events.selector';\r\nimport { selectEvent } from '../../redux/event/events.actions';\r\nimport TagTemplate from '../manage-bands/band/tag-template';\r\n\r\nconst CustomHeader = ({setGlobalFilter}) => (\r\n    <div >\r\n        <div className=\"d-flex justify-content-start\">\r\n            <div style={{paddingLeft:'5px', width:'300px', paddingTop:'5px'}} className=\"center\">\r\n                <h5><strong>Events where you are LED</strong></h5>\r\n            </div> \r\n            <div style={{ paddingLeft: '600px' }}>\r\n                <InputText type=\"search\" placeholder=\"Search\" onInput={(e) => setGlobalFilter(e.target.value)} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport const SetlistsBody = ({events, selectEvent}) => {\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const history = useHistory();\r\n\r\n    const chooseEvent = e => {\r\n        selectEvent(e.value);\r\n        history.push(`/setlists/event/${e.value.id}`);\r\n    }\r\n\r\n    return (\r\n        <DataTable className=\"animated faster fadeIn\"\r\n                header={\r\n                    <CustomHeader\r\n                        setGlobalFilter={setGlobalFilter}/>\r\n                }\r\n                scrollable scrollHeight=\"315px\"\r\n                value={events}\r\n                globalFilter={globalFilter} sortField=\"name\"\r\n                selectionMode=\"single\" onSelectionChange={chooseEvent}>\r\n                <Column field=\"name\" header=\"Name\" sortable />\r\n                <Column field=\"date\" header=\"Date\" sortable style={{ width: '10%', textAlign: 'center' }} />\r\n                <Column field=\"location\" header=\"Location\" sortable />\r\n                <Column field=\"tags\" header=\"Tags\" sortable body={TagTemplate}  />\r\n        </DataTable>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    events: selectEvents\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectEvent: event => dispatch(selectEvent(event))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetlistsBody)\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/card';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PageTitle from '../../components/page-title';\r\nimport SetlistsBody from '../../components/setlists/setlist-body';\r\nconst SetlistsPage = () => {\r\n\r\n    return (\r\n        <div className=\"container-fluid\" style={{ padding: '20px' }}>\r\n            <Card className=\"shadowed\" style={{ padding: '20px' }}>\r\n                <Card.Body>\r\n                    <PageTitle title=\"Your Setlists\">\r\n                        Organize your setlists\r\n                    </PageTitle>\r\n                    <div className=\"spacer-sm\" />\r\n                    <SetlistsBody />\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withRouter(SetlistsPage);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector} from 'reselect';\r\nimport {selectSelectedEvent} from '../../redux/event/events.selector';\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\nexport const SetlistTitle = ({className, event}) => {\r\n    const { name, tour, date, tags } = event;\r\n    const generateTags = tags.lenght ? tags.map(\r\n        (tag, index) => {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <span className=\"h6\" key={index}><Badge variant=\"secondary\" style={{ padding: '6px' }}>{tag}</Badge></span>{' '}\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    ) : (<>No tags</>);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"spacer-mini\" />\r\n                        <span className=\"h3\"><strong>{name}</strong></span>\r\n                        <div className=\"spacer-mini\" />\r\n                        <div className=\"d-flex flex-row\">\r\n                            <p className=\"text-primary\" style={{marginRight:'15px'}}>\r\n                                <strong>{`Tour: ${tour}`}</strong>\r\n                            </p>\r\n                            <p className=\"text-primary\">\r\n                                <strong>{`Date: ${date}`}</strong>\r\n                            </p>\r\n                        </div>\r\n                        <div>\r\n                            {generateTags}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    event: selectSelectedEvent\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetlistTitle)\r\n","import { MultiSelect } from 'primereact/multiselect';\r\nimport React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectEvent } from '../../redux/event/events.actions';\r\nimport { selectSelectedEvent } from '../../redux/event/events.selector';\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nimport eventService from '../../services/EventService';\r\n\r\nconst AddSet = ({ songs, callback, event, selectEvent, showMessage }) => {\r\n    const [name, setName] = useState('');\r\n    const [setSongs, setSetSongs] = useState([]);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        eventService.update(event.id, {\r\n            ...event,\r\n            setlist: event.setlist.concat([{ name, songs: setSongs }])\r\n        })\r\n            .then(event => {\r\n                const stateEvent = {\r\n                    ...event,\r\n                    date: new Date(event.date).toLocaleDateString()\r\n                };\r\n                selectEvent(stateEvent);\r\n                callback();\r\n                showMessage({ severity: 'success', summary: 'Success Message', detail: \"Set added successfully\" });\r\n            })\r\n            .catch(error => showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update setlist\" }));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div class=\"form-group\">\r\n                <label for=\"set-name\"><strong>Set name</strong></label>\r\n                <input\r\n                    type=\"text\"\r\n\r\n                    id=\"set-name\"\r\n                    class=\"form-control\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    placeholder=\"Set name\"\r\n                    aria-describedby=\"helpId\" />\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"set-songs\"><strong>Set songs</strong></label>\r\n                <div>\r\n                    <MultiSelect\r\n                        style={{ minWidth: '15em' }}\r\n                        id=\"set-songs\"\r\n                        placeholder=\"Set Songs\"\r\n                        value={setSongs}\r\n                        onChange={e => setSetSongs(e.value)}\r\n                        options={songs} />\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex flex-row justify-content-end\">\r\n                <div>\r\n                    <Button variant=\"success\" type=\"submit\" >Save</Button>{' '}\r\n                    <Button variant=\"secondary\" onClick={callback}>Close</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    event: selectSelectedEvent\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectEvent: event => dispatch(selectEvent(event)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSet)\r\n","import { MultiSelect } from 'primereact/multiselect';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectEvent } from '../../redux/event/events.actions';\r\nimport { selectSelectedEvent } from '../../redux/event/events.selector';\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nimport eventService from '../../services/EventService';\r\n\r\nconst ModifySet = ({ songs, callback, event, selectEvent, showMessage }) => {\r\n    const [formatedSets, setFormatedSets] = useState([]);\r\n    const [setSongs, setSetSongs] = useState([]);\r\n    const [selectedSet, setSelectedSet] = useState({});\r\n\r\n    useEffect(() => {\r\n        setFormatedSets(\r\n            event.setlist.map(set => ({\r\n                label: set.name,\r\n                value: set\r\n            }))\r\n        );\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        eventService.update(event.id, {\r\n            ...event,\r\n            setlist: event.setlist.map(set => {\r\n                if (set._id === selectedSet._id) return { ...selectedSet, songs: setSongs }\r\n                else return set;\r\n            })\r\n        })\r\n            .then(event => {\r\n                const stateEvent = {\r\n                    ...event,\r\n                    date: new Date(event.date).toLocaleDateString()\r\n                };\r\n                selectEvent(stateEvent);\r\n                callback();\r\n                showMessage({ severity: 'success', summary: 'Success Message', detail: \"Set updated successfully\" });\r\n            })\r\n            .catch(error => showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't update setlist\" }));\r\n    }\r\n\r\n    const handleDropdownChange = e => {\r\n        console.log(e.value);\r\n        setSetSongs(e.value.songs);\r\n        setSelectedSet(e.value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label for=\"set-name\"><strong>Set</strong></label>\r\n                <div>\r\n                    <Dropdown\r\n                        value={selectedSet}\r\n                        options={formatedSets}\r\n                        placeholder=\"Select set to modify\"\r\n                        onChange={handleDropdownChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label for=\"set-songs\"><strong>Set songs</strong></label>\r\n                <div>\r\n                    <MultiSelect\r\n                        style={{ minWidth: '15em' }}\r\n                        id=\"set-songs\"\r\n                        placeholder=\"Set Songs\"\r\n                        value={setSongs}\r\n                        onChange={e => setSetSongs(e.value)}\r\n                        options={songs} />\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex flex-row justify-content-end\">\r\n                <div>\r\n                    <Button variant=\"success\" type=\"submit\" >Save</Button>{' '}\r\n                    <Button variant=\"secondary\" onClick={callback}>Close</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    event: selectSelectedEvent\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectEvent: event => dispatch(selectEvent(event)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModifySet)","import { MultiSelect } from 'primereact/multiselect';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectEvent } from '../../redux/event/events.actions';\r\nimport { selectSelectedEvent } from '../../redux/event/events.selector';\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nimport eventService from '../../services/EventService';\r\n\r\nconst DeleteSet = ({ callback, event, selectEvent, showMessage }) => {\r\n    const [formatedSets, setFormatedSets] = useState([]);\r\n    const [selectedSet, setSelectedSet] = useState({});\r\n\r\n    useEffect(() => {\r\n        setFormatedSets(\r\n            event.setlist.map(set => ({\r\n                label: set.name,\r\n                value: set\r\n            }))\r\n        );\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        eventService.update(event.id, {\r\n            ...event,\r\n            setlist: event.setlist.filter(set => set._id !== selectedSet._id)\r\n        })\r\n            .then(event => {\r\n                const stateEvent = {\r\n                    ...event,\r\n                    date: new Date(event.date).toLocaleDateString()\r\n                };\r\n                selectEvent(stateEvent);\r\n                callback();\r\n                showMessage({ severity: 'success', summary: 'Success Message', detail: \"Set deleted successfully\" });\r\n            })\r\n            .catch(error => showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't delete setlist\" }));\r\n    }\r\n\r\n    const handleDropdownChange = e => {\r\n        setSelectedSet(e.value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label for=\"set-name\"><strong>Set</strong></label>\r\n                <div>\r\n                    <Dropdown\r\n                        value={selectedSet}\r\n                        options={formatedSets}\r\n                        placeholder=\"Select set to delete\"\r\n                        onChange={handleDropdownChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex flex-row justify-content-end\">\r\n                <div>\r\n                    <Button variant=\"danger\" type=\"submit\" >Delete</Button>{' '}\r\n                    <Button variant=\"secondary\" onClick={callback}>Close</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    event: selectSelectedEvent\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectEvent: event => dispatch(selectEvent(event)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteSet)","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector } from 'reselect';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { selectSelectedEvent } from '../../redux/event/events.selector';\r\nimport { selectEvent } from '../../redux/event/events.actions';\r\nimport songService from '../../services/SongService';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from \"primereact/column\";\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport AddSet from './add-set';\r\nimport ModifySet from './modify-set';\r\nimport DeleteSet from './delete-set';\r\n\r\n\r\nconst CustomHeader = ({\r\n    setGlobalFilter,\r\n    setIsAddSetDialogDisplaying,\r\n    setIsModifySetDialogDisplaying,\r\n    setIsRemoveSetDialogDisplaying\r\n}) => (\r\n        <div style={{ paddingTop: '2vh' }}>\r\n            <div className=\"d-flex flex-row justify-content-start\">\r\n                <div style={{ paddingBottom: '1vh', marginRight: '1vw' }}>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setIsAddSetDialogDisplaying(true)}\r\n                    >\r\n                        <span className=\"text-light\">\r\n                            <i className=\"fas fa-plus-square\" />{' '}\r\n                        Add set\r\n                    </span>\r\n                    </Button>\r\n                </div>\r\n                <div style={{ paddingBottom: '1vh', marginRight: '1vw' }}>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setIsModifySetDialogDisplaying(true)}\r\n                    >\r\n                        <span className=\"text-light\">\r\n                            <i className=\"fas fa-edit\" />{' '}\r\n                        Modify Set\r\n                    </span>\r\n                    </Button>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => setIsRemoveSetDialogDisplaying(true)}\r\n                    >\r\n                        <span className=\"text-light\">\r\n                            <i className=\"far fa-trash-alt\"></i>{' '}\r\n                        Delete set\r\n                    </span>\r\n                    </Button>\r\n                </div>\r\n                <div style={{ paddingLeft: '37vw' }}>\r\n                    <InputText type=\"search\" placeholder=\"Search\" onInput={(e) => setGlobalFilter(e.target.value)} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\nconst EventSetlist = ({ event, showMessage }) => {\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    const [setlistItems, setSetlistItems] = useState([]);\r\n    const [globalFilter, setGlobalFilter] = useState('');\r\n    const [isAddSetDialogDisplaying, setIsAddSetDialogDisplaying] = useState(false);\r\n    const [isModifySetDialogDisplaying, setIsModifySetDialogDisplaying] = useState(false);\r\n    const [isRemoveSetDialogDisplaying, setIsRemoveSetDialogDisplaying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        songService.getAll(event.band)\r\n            .then(songs => {\r\n                setAllSongs(\r\n                    songs.map(song => {\r\n                        return { label: song.name, value: song.id }\r\n                    })\r\n                );\r\n            })\r\n            .catch(error => {\r\n                showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't fetch songs\" });\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        event.setlist.length && setSetlistItems(\r\n            event.setlist.map((set, index) => {\r\n                return {\r\n                    key: index,\r\n                    data: {\r\n                        name: set?.name,\r\n                        detail: `Has ${set?.songs?.length || 0} songs`\r\n                    },\r\n                    children: set?.songs.map((song, songIndex) => ({\r\n                        key: `${index}-${songIndex}`,\r\n                        data: {\r\n                            name: allSongs.find(element => element.value === song)?.label\r\n                        }\r\n                    }))\r\n                }\r\n            })\r\n        );\r\n    }, [allSongs, event.setlist]);\r\n\r\n    const renderAddSetModal = (\r\n        <Modal\r\n            show={isAddSetDialogDisplaying}\r\n            onHide={() => setIsAddSetDialogDisplaying(false)}\r\n            dialogClassName=\"modal-dialog-centered\"\r\n            aria-labelledby=\"modal-title\"\r\n            onExiting={() => setIsAddSetDialogDisplaying(false)}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"modal-title\">\r\n                    Add set\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <AddSet callback={() => setIsAddSetDialogDisplaying(false)} songs={allSongs} />\r\n            </Modal.Body>\r\n            <Modal.Footer />\r\n        </Modal>\r\n    )\r\n\r\n    const renderModifySetModal = (\r\n        <Modal\r\n            show={isModifySetDialogDisplaying}\r\n            onHide={() => setIsModifySetDialogDisplaying(false)}\r\n            dialogClassName=\"modal-dialog-centered\"\r\n            aria-labelledby=\"modal-title\"\r\n            onExiting={() => setIsModifySetDialogDisplaying(false)}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"modal-title\">\r\n                    Modify set\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <ModifySet callback={() => setIsModifySetDialogDisplaying(false)} songs={allSongs} />\r\n            </Modal.Body>\r\n            <Modal.Footer />\r\n        </Modal>\r\n    )\r\n\r\n    const renderRemoveSet = (\r\n        <Modal\r\n            show={isRemoveSetDialogDisplaying}\r\n            onHide={() => setIsRemoveSetDialogDisplaying(false)}\r\n            dialogClassName=\"modal-dialog-centered\"\r\n            aria-labelledby=\"modal-title\"\r\n            onExiting={() => setIsRemoveSetDialogDisplaying(false)}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"modal-title\">\r\n                    Remove set\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <DeleteSet callback={() => setIsRemoveSetDialogDisplaying(false)}/>\r\n            </Modal.Body>\r\n            <Modal.Footer />\r\n        </Modal>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {renderAddSetModal}\r\n            {renderModifySetModal}\r\n            {renderRemoveSet}\r\n            <TreeTable\r\n                scrollable scrollHeight=\"40vh\"\r\n                value={setlistItems}\r\n                className=\"animated faster fadeIn\"\r\n                globalFilter={globalFilter}\r\n                header={<CustomHeader\r\n                    setIsRemoveSetDialogDisplaying={setIsRemoveSetDialogDisplaying}\r\n                    setIsModifySetDialogDisplaying={setIsModifySetDialogDisplaying}\r\n                    setIsAddSetDialogDisplaying={setIsAddSetDialogDisplaying}\r\n                    setGlobalFilter={setGlobalFilter} />}\r\n            >\r\n                <Column field=\"name\" header=\"Name\" expander />\r\n                <Column field=\"detail\" header=\"Detail\" />\r\n            </TreeTable>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    event: selectSelectedEvent\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    selectEvent: event => dispatch(selectEvent(event)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EventSetlist)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect, Switch, useParams } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PrivateRoute from '../../routing/PrivateRoute';\r\nimport { selectSelectedEvent } from '../../redux/event/events.selector';\r\nimport Card from 'react-bootstrap/Card';\r\nimport SetlistTitle from '../../components/setlists/setlist-title';\r\nimport EventSetlist from '../../components/setlists/event-setlist';\r\n\r\nconst ViewEvent = ({selectedEvent}) => {\r\n    const { id } = useParams();\r\n\r\n    if (id !== selectedEvent.id) return <Redirect to=\"/setlists\" />\r\n\r\n    return (\r\n        <div className=\"container-fluid animated faster fadeIn\" style={{ padding: '20px' }}>\r\n            <Card className=\"shadowed\" style={{ padding: '20px' }}>\r\n                <Card.Body>\r\n                    <SetlistTitle />\r\n                    <hr />\r\n                    <div className=\"spacer-mini\" />\r\n                    <EventSetlist/>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    selectedEvent: selectSelectedEvent\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewEvent)\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport PrivateRoute from '../../routing/PrivateRoute';\r\nimport SetlistsPage from './setlists-page';\r\nimport eventService from '../../services/EventService';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { selectEvents } from '../../redux/event/events.selector';\r\nimport { showMessage } from '../../redux/growl/growl.actions';\r\nimport { fetchEvents } from '../../redux/event/events.actions';\r\nimport ViewEvent from './view-event';\r\n\r\nconst SetlistsRouter = ({ user, showMessage, fetchEvents}) => {\r\n    useEffect(() => {\r\n        eventService.eventsByLED(user.id)\r\n        .then(events => {\r\n            const newEvents = events.map(\r\n                event => ({\r\n                    ...event,\r\n                    date: new Date(event.date).toLocaleDateString()\r\n                }));\r\n            fetchEvents(newEvents);\r\n        })\r\n        .catch(error => {\r\n            showMessage({ severity: 'error', summary: 'Error Message', detail: \"Couldn't fetch events\" });\r\n        }); \r\n    }, []);\r\n\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute path=\"/setlists/event/:id\" component={ViewEvent} />\r\n            <PrivateRoute component={SetlistsPage} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    events: selectEvents,\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchEvents: events => dispatch(fetchEvents(events)),\r\n    showMessage: message => dispatch(showMessage(message))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetlistsRouter)\r\n","import { Growl } from 'primereact/growl';\r\nimport React, { useRef, useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Switch } from 'react-router-dom';\r\nimport Sidebar from '../components/sidebar/sidebar';\r\nimport PrivateRoute from '../routing/PrivateRoute';\r\nimport ManageBandsPage from './manage-bands/manage-bands-page';\r\nimport SetlistsRouter from './setlists/setlists-router';\r\n\r\nconst HomePage = ({ growlMessages }) => {\r\n\r\n    const [prevMessages, setPrevMessages] = useState(null);\r\n    const growl = useRef();\r\n    \r\n    if (growlMessages && growlMessages !== prevMessages) {\r\n        if (growlMessages.length > 0) {\r\n            growl.current.show(growlMessages);\r\n            setPrevMessages(growlMessages);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-dark container-fluid fill-height\">\r\n            <div className=\"row\">\r\n                <Card className=\"shadowed fill-height col-2 \">\r\n                    <Sidebar />\r\n                </Card>\r\n                <div className=\"col-10\">\r\n                    <Growl ref={growl} id=\"my-super-growl\" position=\"topright\" />\r\n                    <Switch>\r\n                        <PrivateRoute path='/bands' component={ManageBandsPage} />\r\n                        <PrivateRoute path='/setlists' component={SetlistsRouter} />\r\n                        <Redirect from=\"/\" to=\"/bands\" />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n    { growlMessages: state.growlMessages.messages }\r\n)\r\n\r\nexport default connect(mapStateToProps)(HomePage);","import React, { useState } from 'react';\r\nimport { Redirect, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./routing/PrivateRoute\";\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { Provider } from \"react-redux\";\r\nimport RegisterPage from './pages/auth/register-page';\r\nimport LoginPage from './pages/auth/login-page';\r\nimport Cookies from 'js-cookie';\r\nimport setAuthToken from './utils/SetAuthToken';\r\nimport HomePage from './pages/home-page';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport './App.css';\r\nimport './theme/styles.css';\r\nimport './theme/animate.css';\r\nimport './theme/style.scss';\r\nimport './theme/theme.scss';\r\n\r\nfunction App() {\r\n  const [jwtCookie,] = useState(Cookies.get('jwt'));\r\n\r\n  if (jwtCookie) {\r\n    const jwt = JSON.parse(jwtCookie);\r\n    setAuthToken(jwt.token);\r\n  }\r\n\r\n  const renderRoutes = () => {\r\n    return jwtCookie ?\r\n      (\r\n          <Switch>\r\n            <PrivateRoute path=\"/\" component={HomePage} />\r\n          </Switch>\r\n      ) :\r\n      (\r\n          <Switch>\r\n            <Route exact path=\"/\" to=\"/login\" component={LoginPage} />\r\n            <Route exact path=\"/login\" component={LoginPage} />\r\n            <Route exact path=\"/register\" component={RegisterPage} />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Router>\r\n          {renderRoutes()}\r\n        </Router>\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/only_logo.138c63d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/register_bg.abe673d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/google_logo.f6ce5696.svg\";","module.exports = __webpack_public_path__ + \"static/media/fb_logo.dce3111d.svg\";","module.exports = __webpack_public_path__ + \"static/media/login_bg.72512d89.jpg\";"],"sourceRoot":""}