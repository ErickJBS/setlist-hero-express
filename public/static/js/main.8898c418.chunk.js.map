{"version":3,"sources":["assets/only_logo.svg","assets/register_bg.jpg","assets/google_logo.svg","assets/fb_logo.svg","assets/login_bg.jpg","logo.svg","routing/PrivateRoute.jsx","redux/auth/auth.types.js","redux/auth/auth.reducer.js","redux/root.reducer.js","redux/store.js","redux/auth/auth.selector.js","redux/auth/auth.actions.js","components/mini-logo.jsx","environments/production.js","environments/base.js","services/AuthService.js","components/register/register-form.jsx","utils/RegisterUtils.js","pages/register-page.jsx","components/login/social-network-button.jsx","components/login/login-form.jsx","pages/login-page.jsx","pages/landing-page.jsx","pages/band-management-page.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","connect","state","auth","Component","component","user","loading","path","rest","render","props","to","AuthActionTypes","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_SUCCESS","REGISTER_FAILURE","jwt","Cookies","get","JSON","parse","INITIAL_STATE","token","error","authReducer","action","type","payload","rootReducer","combineReducers","store","createStore","devToolsEnhancer","selectUser","createSelector","registerSuccess","MiniLogo","className","src","logo","alt","style","height","width","env","host","api","isProduction","isDevelopment","environment","baseUrl","social","requestUrl","axios","response","fetchedUrl","request","responseURL","console","log","data","post","headers","status","Error","withCredentials","message","errors","msg","mapStateToProps","createStructuredSelector","dispatch","registerUser","useState","password","setPassword","name","setName","username","setUsername","email","setEmail","passwordFeedback","setPasswordFeedback","validPassword","setValidPassword","confirmPassword","setConfirmPassword","passwordConfirmed","setPasswordConfifmed","confirmPasswordFeedback","setConfirmPasswordFeedback","isRegistered","setIsRegistered","useEffect","onSubmit","e","preventDefault","displayName","authService","register","then","value","alert","catch","required","id","placeholder","onChange","target","aria-describedby","test","paddingLeft","backgroundImage","image","backgroundRepeat","backgroundAttachment","backgroundSize","Card","padding","SocialNetworkButton","text","btnClass","onClick","window","location","href","marginRight","identifier","setIdentifier","errorFeedback","setErrorFeedback","login","gLogo","fLogo","LandingPage","BandManagementPage","componentToTest","App","jwtCookie","exact","BandManagement","LoginPage","RegisterPage","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,sJCgC5BC,eAJS,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,QAGCF,EA3BM,SAAC,GAAD,IACRG,EADQ,EACnBC,UADmB,IAEnBF,KAAQG,EAFW,EAEXA,KAAMC,EAFK,EAELA,QACdC,EAHmB,EAGnBA,KACGC,EAJgB,kDAMnB,kBAAC,IAAD,CACED,KAAMA,EACNE,OACE,SAAAC,GAAK,OAAML,GAASC,EAGd,kBAACH,EAAD,iBAAeO,EAAWF,IAF5B,kBAAC,IAAD,CAAUG,GAAG,iB,eCNRC,EATS,CACpBC,YAAa,cACbC,cAAe,gBACfC,cAAe,gBACfC,OAAQ,SACRC,iBAAkB,mBAClBC,iBAAkB,oB,iBCHlBC,EAAM,GACNC,IAAQC,IAAI,SAAQF,EAAMG,KAAKC,MAAOH,IAAQC,IAAI,SAEtD,IAAMG,EAAgB,CAClBnB,KAAM,aACFoB,MAAQN,EAAIM,OACTN,EAAId,OACN,GACLqB,MAAO,IAqCIC,EAlCK,WAAoC,IAAnC1B,EAAkC,uDAA1BuB,EAAeI,EAAW,uCAC3CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACd,OAAQD,GACJ,KAAKjB,EAAgBE,cACjB,OAAO,2BACAb,GADP,IAEII,KAAMyB,IAEd,KAAKlB,EAAgBG,cACjB,OAAO,2BACAd,GADP,IAEIyB,MAAOI,IAEf,KAAKlB,EAAgBI,OACjB,OAAO,2BACAf,GADP,IAEII,KAAM,KACNqB,MAAO,OAEf,KAAKd,EAAgBK,iBACjB,OAAO,2BACAhB,GADP,IAEII,KAAMyB,IAEd,KAAKlB,EAAgBM,iBACjB,OAAO,2BACAjB,GADP,IAEIyB,MAAOI,IAEf,QACI,OAAO7B,ICrCJ8B,EAJKC,0BAAgB,CAChC9B,KAAMyB,I,QCQKM,EANDC,sBACVH,EAHiB,GAKjBI,8B,QCLSC,EAAaC,YACtB,CAHsB,SAAApC,GAAK,OAAIA,EAAMC,QAIrC,SAAAA,GAAI,OAAIA,EAAKG,QCeJiC,EAAkB,SAACjC,GAAD,MAAW,CACtCwB,KAAMjB,EAAgBK,iBACtBa,QAASzB,I,iBCNEkC,EAdE,WACb,OACI,yBAAKC,UAAU,wBACX,yBAAKC,IAAKC,IAAMC,IAAI,OAChBC,MACiB,CACTC,OAAO,GAAD,OAEN,IAFM,MACNC,MAAM,GAAD,OACL,IADK,W,0DCPvBC,ECDS,SAACC,GACZ,MAAO,CACHC,IAAI,GAAD,OAAKD,EAAL,YAJM,OAKTE,cAAc,EACdC,eAAe,GDHXC,CADC,IAGE,iBACRL,GEHDM,EAAUD,EAAYH,IA2Cb,MAzCf,iJAE0BK,GAF1B,kFAGcC,EAHd,UAG8BF,EAH9B,iBAG8CC,GAH9C,SAI+BE,IAAMnC,IAAIkC,GAJzC,cAIcE,EAJd,OAKcC,EAAaD,EAASE,QAAQC,YACpCC,QAAQC,IAAIL,GANpB,kBAOeC,GAPf,0KAUmBK,GAVnB,6FAYkBR,EAZlB,UAYkCF,EAZlC,2BAamCG,IAAMQ,KAAKT,EAAYQ,EAAM,CAAEE,QAAS,CAAE,eAAgB,sBAb7F,cAakBR,EAblB,yBAcmBA,EAASM,MAd5B,mCAgB4C,OAA5B,2CAAON,gBAAP,eAAiBS,QAhBjC,uBAiBsB,IAAIC,MAAM,2BAjBhC,WAmB4C,OAA5B,2CAAOV,gBAAP,eAAiBS,QAnBjC,uBAoBsB,IAAIC,MAAM,+CApBhC,qLAwBgBJ,GAxBhB,mGA0BkBR,EA1BlB,UA0BkCF,EA1BlC,wBA2BmCG,IAAMQ,KAAKT,EAAYQ,EAAM,CAAEE,QAAS,CAAE,eAAgB,oBAAsBG,iBAAgB,IA3BnI,cA2BkBX,EA3BlB,OA4BYI,QAAQC,IAAIL,GA5BxB,kBA6BmBA,EAASM,MA7B5B,mCA+BkBM,EA/BlB,sCA+B4B,KAAOZ,gBA/BnC,iBA+B4B,EAAiBM,YA/B7C,iBA+B4B,EAAuBO,OAAO,UA/B1D,aA+B4B,EAAkCC,IAClB,OAA5B,2CAAOd,gBAAP,eAAiBS,QAhCjC,uBAiCsB,IAAIC,MAAM,+CAjChC,cAmCsB,IAAIA,MAAME,GAnChC,wHCkGMG,EAAkBC,YAAyB,CAC7CpE,KAAM+B,IAOKpC,cACXwE,GALuB,SAAAE,GAAQ,MAAK,CACpCC,aAAc,SAAAtE,GAAI,OAAIqE,EAASpC,EAAgBjC,QAGpCL,EArGM,SAAC,GAA2B,EAAzB2E,aAA0B,IAAZtE,EAAW,EAAXA,KAAW,EAEbuE,mBAAS,IAFI,mBAEtCC,EAFsC,KAE5BC,EAF4B,OAGrBF,mBAAS,IAHY,mBAGtCG,EAHsC,KAGhCC,EAHgC,OAIbJ,mBAAS,IAJI,mBAItCK,EAJsC,KAI5BC,EAJ4B,OAKnBN,mBAAS,IALU,mBAKtCO,EALsC,KAK/BC,EAL+B,OAMGR,mBAAS,IANZ,mBAMtCS,EANsC,KAMpBC,EANoB,OAOHV,oBAAS,GAPN,mBAOtCW,EAPsC,KAOvBC,EAPuB,OAQCZ,mBAAS,IARV,mBAQtCa,EARsC,KAQrBC,EARqB,OASKd,oBAAS,GATd,mBAStCe,EATsC,KASnBC,EATmB,OAUiBhB,mBAAS,IAV1B,mBAUtCiB,EAVsC,KAUbC,EAVa,OAWLlB,oBAAS,GAXJ,mBAWtCmB,EAXsC,KAWxBC,EAXwB,KAa7CC,qBAAW,WACHpB,IAAaY,GACbK,EAA2B,2BAC3BF,GAAqB,KAGrBE,EAA2B,IAC3BF,GAAqB,MAG7B,CAACf,EAASY,IA6BV,OAAIM,EACO,kBAAC,IAAD,CAAUpF,GAAG,WAGpB,oCACI,kBAAC,EAAD,MACA,0BAAMuF,SAhCO,SAACC,GAClBA,EAAEC,iBACEb,GAAiBI,IACjBtF,EAAO,CAAC8E,QAAOkB,YAAatB,EAAMF,WAAUI,YAC5CqB,EAAYC,SAASlG,GACpBmG,MAAK,SAAAC,GACF5C,QAAQC,IAAI2C,GACZT,GAAgB,GAChBU,MAAM,sBAEVC,OAAM,SAAAjF,GACHoE,EAA2BpE,EAAM2C,eAsBhC,yBAAK7B,UAAU,cACX,2BAAOX,KAAK,OAAOW,UAAU,eAAeoE,UAAQ,EAChDC,GAAG,YAAYC,YAAY,aAC3BC,SAAU,SAACZ,GAAD,OAAOnB,EAAQmB,EAAEa,OAAOP,WAE1C,yBAAKjE,UAAU,cACX,2BAAOX,KAAK,OAAOW,UAAU,eAAeqE,GAAG,gBAC3CC,YAAY,iBAAiBF,UAAQ,EACrCG,SAAU,SAACZ,GAAD,OAAOjB,EAAYiB,EAAEa,OAAOP,WAE9C,yBAAKjE,UAAU,cACX,2BAAOX,KAAK,QAAQW,UAAU,eAAeqE,GAAG,cAC5CI,mBAAiB,YAAYH,YAAY,cAAcF,UAAQ,EAC/DG,SAAU,SAACZ,GAAD,OAAOf,EAASe,EAAEa,OAAOP,UACvC,2BAAOI,GAAG,YAAYrE,UAAU,wBAAhC,mDAEJ,yBAAKA,UAAU,cACX,2BAAOX,KAAK,WAAWW,UAAU,eAAeoE,UAAQ,EAACE,YAAY,WACjED,GAAG,iBAAiBE,SAlCX,SAACZ,GAC1BrB,EAAYqB,EAAEa,OAAOP,OCtDe,iEAAiES,KDuD/ErC,IAGlBS,EAAoB,IACpBE,GAAiB,IAHjBF,EAAoB,mIAgCZ,2BAAOuB,GAAG,mBAAmBrE,UAAU,yBAAyB6C,IAEpE,yBAAK7C,UAAU,cACX,2BAAOX,KAAK,WAAWW,UAAU,eAAeoE,UAAQ,EAACE,YAAY,mBACjED,GAAG,iBAAiBE,SAAU,SAACZ,GAAD,OAAOT,EAAmBS,EAAEa,OAAOP,UACrE,2BAAOI,GAAG,mBAAmBrE,UAAU,yBAAyBqD,IAEpE,4BAAQhE,KAAK,SAASW,UAAU,wCAAhC,aAEJ,yBAAKA,UAAU,gBACf,2BAAOA,UAAU,UAAjB,4BAAmD,kBAAC,IAAD,CAAMI,MAAO,CAACuE,YAAa,OAAQxG,GAAG,UAAtC,mB,iCExEzD6D,EAAkBC,YAAyB,CAC7CpE,KAAM+B,IAKKpC,cACXwE,EADWxE,EAvBM,SAAC,GAAa,EAAXK,KACpB,OACI,yBAAKmC,UAAU,yBAAyBI,MAAO,CAC3CwE,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,qBAAsB,QACtBC,eAAgB,UAEhB,oCACI,kBAACC,EAAA,EAAD,CAAM7E,MAAO,CAAEE,MAAO,QAAS4E,QAAQ,SACnC,kBAAC,EAAD,YCddrE,EAAUD,EAAYH,IAqBb0E,EAnBa,SAAC,GAAsC,IAApCjF,EAAmC,EAAnCA,KAAMkF,EAA6B,EAA7BA,KAAMhG,EAAuB,EAAvBA,OAAQiG,EAAe,EAAfA,SAC/C,OACI,4BAAQrF,UAAS,wBAAmBqF,GACpCC,QAAS,kBAAMC,OAAOC,SAASC,KAAhB,UAA0B5E,EAA1B,iBAA0CzB,KACrD,0BAAMY,UAAU,0BACZ,yBAAKC,IAAKC,EAAMC,IAAI,OAChBC,MACiB,CACTC,OAAO,GAAD,OAGN,GAHM,MACNC,MAAM,GAAD,OAEL,GAFK,MACLoF,YAAa,UAGxBN,K,kCCwCXpD,GAAkBC,YAAyB,CAC7CpE,KAAM+B,IAOKpC,eACXwE,IALuB,SAAAE,GAAQ,MAAK,CACpCC,aAAc,SAAAtE,GAAI,OAAIqE,EAASpC,EAAgBjC,QAGpCL,EAvDM,SAAC,GAA2B,EAAzB2E,aAA0B,IAAZtE,EAAW,EAAXA,KAAW,EACbuE,mBAAS,IADI,mBACtCC,EADsC,KAC5BC,EAD4B,OAETF,mBAAS,IAFA,mBAEtCuD,EAFsC,KAE1BC,EAF0B,OAGHxD,mBAAS,IAHN,mBAGtCyD,EAHsC,KAGvBC,EAHuB,KAK7CrC,qBAAU,kBAAMqC,EAAiB,MAAI,CAACzD,EAASsD,IAgB/C,OACI,oCACI,kBAAC,EAAD,MACA,0BAAMjC,SAjBO,SAACC,GAClBA,EAAEC,iBACF/F,EAAO,CAAE8H,aAAYtD,YACrByB,EAAYiC,MAAMlI,GACbmG,MAAK,SAAAC,GACF5C,QAAQC,IAAI2C,GACZC,MAAM,cACNqB,OAAOC,SAASC,KAAO,OAE1BtB,OAAM,SAAAjF,GACH4G,EAAiB5G,EAAM2C,cAQvB,yBAAK7B,UAAU,cACX,2BAAOX,KAAK,OAAOW,UAAU,eAAeoE,UAAQ,EAChDC,GAAG,YAAYC,YAAY,0BAC3BC,SAAU,SAACZ,GAAD,OAAOiC,EAAcjC,EAAEa,OAAOP,WAEhD,yBAAKjE,UAAU,cACX,2BAAOX,KAAK,WAAWW,UAAU,eAAeoE,UAAQ,EAACE,YAAY,WACjED,GAAG,iBAAiBE,SAAU,SAACZ,GAAD,OAAOrB,EAAYqB,EAAEa,OAAOP,UAE9D,2BAAOI,GAAG,mBAAmBrE,UAAU,yBAAyB6F,IAEpE,4BAAQxG,KAAK,SAASW,UAAU,wCAAhC,WAEJ,yBAAKA,UAAU,gBACf,kBAAC,EAAD,CAAqBZ,OAAO,SAASgG,KAAK,qBAAqBlF,KAAM8F,IAAOX,SAAS,wBACrF,kBAAC,EAAD,CAAqBjG,OAAO,WAAWgG,KAAK,uBAAuBlF,KAAM+F,IAAOZ,SAAS,wBACzF,yBAAKrF,UAAU,gBACf,2BAAOA,UAAU,UAAjB,0BAAiD,kBAAC,IAAD,CAAMI,MAAO,CAAEuE,YAAa,OAASxG,GAAG,aAAxC,sB,oBC7BvD6D,GAAkBC,YAAyB,CAC7CpE,KAAM+B,IAKKpC,eACXwE,GADWxE,EAvBG,WACd,OACI,yBAAKwC,UAAU,yBAAyBI,MAAO,CAC3CwE,gBAAgB,OAAD,OAASC,KAAT,KACfC,iBAAkB,YAClBC,qBAAsB,QACtBC,eAAgB,UAEhB,oCACI,kBAACC,EAAA,EAAD,CAAM7E,MAAO,CAAEE,MAAO,QAAS4E,QAAQ,SACnC,kBAAC,GAAD,YCTLgB,GARK,WAChB,OACI,uDCMOC,GARY,WACvB,OACI,yDCSFC,I,MAAkB,oCAAE,kBAAC,EAAD,CAAcpG,UAAU,gBAwCnCqG,OAtCf,WAAgB,IAAD,EACQjE,mBAASxD,IAAQC,IAAI,QAAnCyH,EADM,oBA6Bb,OAFAjF,QAAQC,IAAIgF,GAGV,kBAAC,IAAD,CAAU7G,MAAOA,GACf,kBAAC,IAAD,KA3BK6G,EAEH,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcC,OAAK,EAACxI,KAAK,IAAII,GAAG,QAAQP,UAAWsI,KACnD,kBAAC,EAAD,CAAcK,OAAK,EAACxI,KAAK,QAAQH,UAAWsI,KAC5C,kBAAC,EAAD,CAAcK,OAAK,EAACxI,KAAK,gBAAgBH,UAAW4I,KACpD,kBAAC,IAAD,CAAUrI,GAAG,QAKjB,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoI,OAAK,EAACxI,KAAK,IAAII,GAAG,SAASP,UAAW6I,KAC7C,kBAAC,IAAD,CAAOF,OAAK,EAACxI,KAAK,QAAQE,OAAQ,kBAAMmI,MACxC,kBAAC,IAAD,CAAOG,OAAK,EAACxI,KAAK,SAASH,UAAW6I,KACtC,kBAAC,IAAD,CAAOF,OAAK,EAACxI,KAAK,YAAYH,UAAW8I,IACzC,kBAAC,IAAD,CAAUvI,GAAG,WCzBLwI,QACW,cAA7BpB,OAAOC,SAASoB,UAEe,UAA7BrB,OAAOC,SAASoB,UAEhBrB,OAAOC,SAASoB,SAASC,MACvB,2D,MCVNC,IAAS7I,OACP,kBAAC,IAAM8I,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdnD,OAAM,SAAAjF,GACLmC,QAAQnC,MAAMA,EAAM2C,c","file":"static/js/main.8898c418.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/only_logo.d9e48477.svg\";","module.exports = __webpack_public_path__ + \"static/media/register_bg.abe673d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/google_logo.f6ce5696.svg\";","module.exports = __webpack_public_path__ + \"static/media/fb_logo.dce3111d.svg\";","module.exports = __webpack_public_path__ + \"static/media/login_bg.72512d89.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  auth: { user, loading },\r\n  path,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    path={path}\r\n    render={\r\n      props => (!user && !loading ? (\r\n          <Redirect to='/login' />\r\n        ) : (\r\n            <Component {...props} {...rest} />\r\n        )\r\n      )\r\n    }    \r\n  />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","const AuthActionTypes = {\r\n    LOGIN_START: 'LOGIN_START',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n    LOGOUT: 'LOGOUT',\r\n    REGISTER_SUCCESS: 'REGISTER_SUCCESS',\r\n    REGISTER_FAILURE: 'REGISTER_FAILURE'\r\n}\r\n\r\nexport default AuthActionTypes;","import AuthActionTypes from './auth.types';\r\nimport Cookies from 'js-cookie';\r\n\r\nlet jwt = {};\r\nif (Cookies.get('jwt')) jwt = JSON.parse((Cookies.get('jwt')));\r\n\r\nconst INITIAL_STATE = {\r\n    user: {\r\n        token : jwt.token,\r\n        ...jwt.user\r\n    } || {},\r\n    error: {}\r\n};\r\n\r\nconst authReducer = (state = INITIAL_STATE, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case AuthActionTypes.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: payload,\r\n            };\r\n        case AuthActionTypes.LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: payload\r\n            };\r\n        case AuthActionTypes.LOGOUT:\r\n            return {\r\n                ...state,\r\n                user: null,\r\n                error: null\r\n            };\r\n        case AuthActionTypes.REGISTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: payload\r\n            };\r\n        case AuthActionTypes.REGISTER_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {combineReducers} from 'redux';\r\nimport authReducer from './auth/auth.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './root.reducer';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    devToolsEnhancer()\r\n);\r\n\r\nexport default store;","import { createSelector } from 'reselect';\r\n\r\nexport const selectAuth = state => state.auth;\r\n\r\nexport const selectUser = createSelector(\r\n    [selectAuth],\r\n    auth => auth.user\r\n);","import AuthActionTypes from './auth.types';\r\n\r\nexport const loginStart = crendentials => ({\r\n    type: AuthActionTypes.LOGIN_START,\r\n    payload: crendentials\r\n});\r\n\r\nexport const loginSuccess = (user) => ({\r\n    type: AuthActionTypes.LOGIN_SUCCESS,\r\n    payload: user\r\n});\r\n\r\nexport const loginFailure = (error) => ({\r\n    type: AuthActionTypes.LOGIN_FAILURE,\r\n    payload: AuthActionTypes\r\n});\r\n\r\nexport const logout = () => ({\r\n    type: AuthActionTypes.LOGOUT\r\n});\r\n\r\nexport const registerSuccess = (user) => ({\r\n    type: AuthActionTypes.REGISTER_SUCCESS,\r\n    payload: user\r\n});\r\n\r\nexport const registerFailure = (error) => ({\r\n    type: AuthActionTypes.REGISTER_FAILURE,\r\n    payload: AuthActionTypes\r\n})","import React from 'react';\r\nimport logo from '../assets/only_logo.svg';\r\n\r\nconst MiniLogo = () => {\r\n    return (\r\n        <div className=\"center image-centerd\">\r\n            <img src={logo} alt=\"logo\"\r\n                style={/**Satanic IIFE */\r\n                    ((value) => ({\r\n                        height: `${value}px`,\r\n                        width: `${value}px`\r\n                    }))(100)\r\n                } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiniLogo;","import environment from './base';\r\n\r\nconst host = '';\r\nconst env = environment(host);\r\n\r\nexport default {\r\n    ...env,\r\n};\r\n","const basePath = 'api';\r\n\r\nexport default (host) => {\r\n    return {\r\n        api: `${host}/${basePath}`,\r\n        isProduction: true,\r\n        isDevelopment: false,\r\n    };\r\n}\r\n","import axios from 'axios';\r\nimport environment from 'environment';\r\n\r\nconst baseUrl = environment.api;\r\n\r\nexport class AuthService {\r\n\r\n    async loginWithSocial(social) {\r\n        const requestUrl = `${baseUrl}/auth/${social}`;\r\n        const response = await axios.get(requestUrl);\r\n        const fetchedUrl = response.request.responseURL;\r\n        console.log(response);\r\n        return fetchedUrl;\r\n    }\r\n\r\n    async register(data) {\r\n        try {\r\n            const requestUrl = `${baseUrl}/auth/register`\r\n            const response = await axios.post(requestUrl, data, { headers: { 'content-type': 'application/json' } });\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error?.response?.status === 403) {\r\n                throw new Error('User already registered');\r\n            }\r\n            if (error?.response?.status === 500) {\r\n                throw new Error('Something wrong happened... try again later');\r\n            }\r\n        }\r\n    }\r\n    async login(data) {\r\n        try {\r\n            const requestUrl = `${baseUrl}/auth/email`\r\n            const response = await axios.post(requestUrl, data, { headers: { 'content-type': 'application/json' }, withCredentials:true });\r\n            console.log(response);\r\n            return response.data;\r\n        } catch (error) {\r\n            const message = error?.response?.data?.errors[0]?.msg;\r\n            if (error?.response?.status === 500) {\r\n                throw new Error('Something wrong happened... try again later');\r\n            } else {\r\n                throw new Error(message);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect} from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { registerSuccess } from '../../redux/auth/auth.actions';\r\nimport { validatePassword } from '../../utils/RegisterUtils';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport MiniLogo from '../mini-logo';\r\nimport authService from '../../services/AuthService';\r\n\r\nconst RegisterForm = ({ registerUser, user }) => {\r\n\r\n    const [password, setPassword] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [passwordFeedback, setPasswordFeedback] = useState('');\r\n    const [validPassword, setValidPassword] = useState(false);\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [passwordConfirmed, setPasswordConfifmed] = useState(false);\r\n    const [confirmPasswordFeedback, setConfirmPasswordFeedback] = useState('');\r\n    const [isRegistered, setIsRegistered] = useState(false);\r\n\r\n    useEffect( () => {\r\n        if (password !== confirmPassword){\r\n            setConfirmPasswordFeedback('Passwords are different');\r\n            setPasswordConfifmed(false);\r\n        }\r\n        else {\r\n            setConfirmPasswordFeedback('');\r\n            setPasswordConfifmed(true);\r\n        } \r\n    },\r\n    [password,confirmPassword]);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validPassword && passwordConfirmed) {\r\n            user = {email, displayName: name, password, username };\r\n            authService.register(user)\r\n            .then(value => {\r\n                console.log(value);\r\n                setIsRegistered(true);\r\n                alert('user registered');\r\n            })\r\n           .catch(error =>{\r\n               setConfirmPasswordFeedback(error.message);\r\n           });\r\n\r\n        }\r\n    };\r\n\r\n    const handlePasswordChange = (e) => {\r\n        setPassword(e.target.value);\r\n        if (!validatePassword(password)) {\r\n            setPasswordFeedback('Password must have at least one capital letter, one lowercase letter, one number and one special character (! @ # \\$ % \\^ & \\*)');\r\n        } else {\r\n            setPasswordFeedback('');\r\n            setValidPassword(true);\r\n        }\r\n    };\r\n    if (isRegistered){\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n    return (\r\n        <>\r\n            <MiniLogo/>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" required\r\n                        id=\"inputName\" placeholder=\"Enter name\"\r\n                        onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" id=\"inputUsername\"\r\n                        placeholder=\"Enter username\" required\r\n                        onChange={(e) => setUsername(e.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"email\" className=\"form-control\" id=\"inputEmail1\"\r\n                        aria-describedby=\"emailHelp\" placeholder=\"Enter email\" required\r\n                        onChange={(e) => setEmail(e.target.value)} />\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" required placeholder=\"Password\"\r\n                        id=\"inputPassword1\" onChange={handlePasswordChange} />\r\n                    <small id=\"passwordFeedback\" className=\"form-text text-danger\">{passwordFeedback}</small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" required placeholder=\"Confirm Password\"\r\n                        id=\"inputPassword2\" onChange={(e) => setConfirmPassword(e.target.value)} />\r\n                    <small id=\"passwordFeedback\" className=\"form-text text-danger\">{confirmPasswordFeedback}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-warning btn-block text-light\">Register</button>\r\n            </form>\r\n            <div className=\"spacer-mini\"/>\r\n            <small className=\"center\">Already have an account? <Link style={{paddingLeft: '5px'}} to=\"/login\">Login here</Link></small>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    registerUser: user => dispatch(registerSuccess(user))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RegisterForm);\r\n\r\n","export const validatePassword = (string) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/.test(string);","import React, { Fragment } from 'react';\r\nimport RegisterForm from '../components/register/register-form';\r\nimport Card from 'react-bootstrap/Card'\r\nimport '../theme/styles.css';\r\nimport { connect} from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../redux/auth/auth.selector';\r\nimport { Redirect } from 'react-router-dom';\r\nimport image from '../assets/register_bg.jpg';\r\nconst RegisterPage = ({ user }) => {\r\n    return (\r\n        <div className=\"p-3 fill-height center\" style={{\r\n            backgroundImage: `url(${image})`,\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundAttachment: 'fixed',\r\n            backgroundSize: 'cover'\r\n        }}>\r\n            <>\r\n                <Card style={{ width: '20rem', padding:'15px' }}>\r\n                    <RegisterForm />\r\n                </Card>\r\n            </>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(RegisterPage);\r\n","import React, { useState } from 'react';\r\nimport { Redirect,Switch, Route } from 'react-router-dom';\r\nimport environment from 'environment';\r\nimport { useStore } from 'react-redux';\r\n\r\nconst baseUrl = environment.api;\r\n\r\nconst SocialNetworkButton = ({ logo, text, action, btnClass }) => {\r\n    return (\r\n        <button className={`btn btn-block ${btnClass}`} \r\n        onClick={() => window.location.href = `${baseUrl}/auth/${action}`}>\r\n            <span className=\"btn-content-horizontal\">\r\n                <img src={logo} alt=\"logo\"\r\n                    style={/**Satanic IIFE */\r\n                        ((value) => ({\r\n                            height: `${value}px`,\r\n                            width: `${value}px`,\r\n                            marginRight: \"12px\"\r\n                        }))(20)\r\n                    } />\r\n                {text}\r\n            </span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SocialNetworkButton;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/auth/auth.selector';\r\nimport { registerSuccess } from '../../redux/auth/auth.actions';\r\nimport { Link } from 'react-router-dom';\r\nimport MiniLogo from '../mini-logo';\r\nimport SocialNetworkButton from './social-network-button'\r\nimport gLogo from '../../assets/google_logo.svg';\r\nimport fLogo from '../../assets/fb_logo.svg';\r\nimport authService from '../../services/AuthService';\r\n\r\n\r\nconst RegisterForm = ({ registerUser, user }) => {\r\n    const [password, setPassword] = useState('');\r\n    const [identifier, setIdentifier] = useState('');\r\n    const [errorFeedback, setErrorFeedback] = useState('');\r\n\r\n    useEffect(() => setErrorFeedback(''),[password,identifier]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        user = { identifier, password };\r\n        authService.login(user)\r\n            .then(value => {\r\n                console.log(value);\r\n                alert('Logged In!');\r\n                window.location.href = '/';\r\n            })\r\n            .catch(error => {\r\n                setErrorFeedback(error.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MiniLogo />\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" required\r\n                        id=\"inputName\" placeholder=\"Enter email or username\"\r\n                        onChange={(e) => setIdentifier(e.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" required placeholder=\"Password\"\r\n                        id=\"inputPassword2\" onChange={(e) => setPassword(e.target.value)} />\r\n\r\n                    <small id=\"passwordFeedback\" className=\"form-text text-danger\">{errorFeedback}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-warning btn-block text-light\">Log in</button>\r\n            </form>\r\n            <div className=\"spacer-mini\" />\r\n            <SocialNetworkButton action=\"google\" text=\"Log in with Google\" logo={gLogo} btnClass=\"btn-outline-primary\" />\r\n            <SocialNetworkButton action=\"facebook\" text=\"Log in with Facebook\" logo={fLogo} btnClass=\"btn-outline-primary\" />\r\n            <div className=\"spacer-mini\" />\r\n            <small className=\"center\">Don't have an account? <Link style={{ paddingLeft: '5px' }} to=\"/register\">Register here</Link></small>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    registerUser: user => dispatch(registerSuccess(user))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RegisterForm);\r\n\r\n","import React from 'react';\r\nimport LoginForm from '../components/login/login-form';\r\nimport Card from 'react-bootstrap/Card'\r\nimport '../theme/styles.css';\r\nimport { connect} from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../redux/auth/auth.selector';\r\nimport image from '../assets/login_bg.jpg';\r\n\r\nconst LoginPage = () =>{\r\n    return (\r\n        <div className=\"p-3 fill-height center\" style={{\r\n            backgroundImage: `url(${image})`,\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundAttachment: 'fixed',\r\n            backgroundSize: 'cover'\r\n        }}>\r\n            <>\r\n                <Card style={{ width: '20rem', padding:'15px' }}>\r\n                    <LoginForm />\r\n                </Card>\r\n            </>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectUser\r\n});\r\n\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(LoginPage);","import React from 'react';\r\n\r\nconst LandingPage = () =>{\r\n    return(\r\n        <>\r\n            Landing Page !\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LandingPage;","import React from 'react';\r\n\r\nconst BandManagementPage = () =>{\r\n    return(\r\n        <>\r\n            Band Management!\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BandManagementPage;","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport { Redirect, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./routing/PrivateRoute\";\r\nimport store from './redux/store';\r\nimport { Provider } from \"react-redux\";\r\nimport RegisterPage from './pages/register-page';\r\nimport LoginPage from './pages/login-page';\r\nimport LandingPage from './pages/landing-page';\r\nimport BandManagement from './pages/band-management-page';\r\nimport Cookies from 'js-cookie';\r\nimport './App.css';\r\n\r\nconst componentToTest = <><RegisterPage className=\"full-page\" /></>;\r\n\r\nfunction App() {\r\n  const [jwtCookie,] = useState(Cookies.get('jwt'));\r\n\r\n  const renderRoutes = () => {\r\n    return jwtCookie ?\r\n      (\r\n        <>\r\n          <Switch>\r\n            <PrivateRoute exact path=\"/\" to=\"/home\" component={LandingPage} />\r\n            <PrivateRoute exact path=\"/home\" component={LandingPage} />\r\n            <PrivateRoute exact path=\"/manage-bands\" component={BandManagement} />\r\n            <Redirect to=\"/\"/>\r\n          </Switch>\r\n        </>\r\n      ) :\r\n      (\r\n        <>\r\n          <Switch>\r\n            <Route exact path=\"/\" to=\"/logIn\" component={LoginPage} />\r\n            <Route exact path=\"/test\" render={() => componentToTest} />\r\n            <Route exact path=\"/login\" component={LoginPage} />\r\n            <Route exact path=\"/register\" component={RegisterPage} />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </>\r\n      )\r\n  }\r\n  console.log(jwtCookie);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        {renderRoutes()}\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './theme/styles.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}